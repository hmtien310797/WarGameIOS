//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameSettingWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameSetting), typeof(System.Object));
		L.RegFunction("SetSavingData", SetSavingData);
		L.RegFunction("GetSavingData", GetSavingData);
		L.RegFunction("Init", Init);
		L.RegFunction("HasRecord", HasRecord);
		L.RegFunction("ResetAllData", ResetAllData);
		L.RegFunction("SaveOption", SaveOption);
		L.RegFunction("ClearLoginInfo", ClearLoginInfo);
		L.RegFunction("SaveLoginInfo", SaveLoginInfo);
		L.RegFunction("LoadLoginInfo", LoadLoginInfo);
		L.RegFunction("SaveAll", SaveAll);
		L.RegFunction("New", _CreateGameSetting);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("DefaultQualityLevel", get_DefaultQualityLevel, set_DefaultQualityLevel);
		L.RegVar("NoticeSaveOptions", get_NoticeSaveOptions, set_NoticeSaveOptions);
		L.RegVar("instance", get_instance, null);
		L.RegVar("option", get_option, set_option);
		L.RegFunction("NoticeSaveOptionsCallBake", GameSetting_NoticeSaveOptionsCallBake);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameSetting(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GameSetting obj = new GameSetting();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameSetting.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSavingData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			GameSetting obj = (GameSetting)ToLua.CheckObject(L, 1, typeof(GameSetting));
			GameSetting.ESavingType arg0 = (GameSetting.ESavingType)ToLua.CheckObject(L, 2, typeof(GameSetting.ESavingType));
			string arg1 = ToLua.CheckString(L, 3);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
			obj.SetSavingData(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSavingData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameSetting obj = (GameSetting)ToLua.CheckObject(L, 1, typeof(GameSetting));
			GameSetting.ESavingType arg0 = (GameSetting.ESavingType)ToLua.CheckObject(L, 2, typeof(GameSetting.ESavingType));
			string o = obj.GetSavingData(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameSetting obj = (GameSetting)ToLua.CheckObject(L, 1, typeof(GameSetting));
			bool o = obj.Init();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasRecord(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameSetting obj = (GameSetting)ToLua.CheckObject(L, 1, typeof(GameSetting));
			GameSetting.ESavingType arg0 = (GameSetting.ESavingType)ToLua.CheckObject(L, 2, typeof(GameSetting.ESavingType));
			bool o = obj.HasRecord(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetAllData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameSetting obj = (GameSetting)ToLua.CheckObject(L, 1, typeof(GameSetting));
			obj.ResetAllData();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveOption(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameSetting obj = (GameSetting)ToLua.CheckObject(L, 1, typeof(GameSetting));
			obj.SaveOption();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearLoginInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameSetting obj = (GameSetting)ToLua.CheckObject(L, 1, typeof(GameSetting));
			obj.ClearLoginInfo();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveLoginInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameSetting obj = (GameSetting)ToLua.CheckObject(L, 1, typeof(GameSetting));
			obj.SaveLoginInfo();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadLoginInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameSetting obj = (GameSetting)ToLua.CheckObject(L, 1, typeof(GameSetting));
			obj.LoadLoginInfo();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameSetting obj = (GameSetting)ToLua.CheckObject(L, 1, typeof(GameSetting));
			obj.SaveAll();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DefaultQualityLevel(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameSetting.DefaultQualityLevel);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NoticeSaveOptions(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameSetting obj = (GameSetting)o;
			GameSetting.NoticeSaveOptionsCallBake ret = obj.NoticeSaveOptions;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index NoticeSaveOptions on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, GameSetting.instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_option(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameSetting obj = (GameSetting)o;
			GameSetting.OptionData ret = obj.option;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index option on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DefaultQualityLevel(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameSetting.DefaultQualityLevel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NoticeSaveOptions(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameSetting obj = (GameSetting)o;
			GameSetting.NoticeSaveOptionsCallBake arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (GameSetting.NoticeSaveOptionsCallBake)ToLua.CheckObject(L, 2, typeof(GameSetting.NoticeSaveOptionsCallBake));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(GameSetting.NoticeSaveOptionsCallBake), func) as GameSetting.NoticeSaveOptionsCallBake;
			}

			obj.NoticeSaveOptions = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index NoticeSaveOptions on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_option(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameSetting obj = (GameSetting)o;
			GameSetting.OptionData arg0 = (GameSetting.OptionData)ToLua.CheckObject(L, 2, typeof(GameSetting.OptionData));
			obj.option = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index option on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GameSetting_NoticeSaveOptionsCallBake(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			Delegate arg1 = DelegateFactory.CreateDelegate(typeof(GameSetting.NoticeSaveOptionsCallBake), func);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

