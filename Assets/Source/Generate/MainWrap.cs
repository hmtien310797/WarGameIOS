//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MainWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Main), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("GetBlockInfo", GetBlockInfo);
		L.RegFunction("isOccupied", isOccupied);
		L.RegFunction("Restart", Restart);
		L.RegFunction("ChangeWorldBlockInfo", ChangeWorldBlockInfo);
		L.RegFunction("ReloadWorldBlockInfo", ReloadWorldBlockInfo);
		L.RegFunction("GetTableMgr", GetTableMgr);
		L.RegFunction("IsBattleState", IsBattleState);
		L.RegFunction("ChangeGameState", ChangeGameState);
		L.RegFunction("IsInInitState", IsInInitState);
		L.RegFunction("IsInLoginState", IsInLoginState);
		L.RegFunction("IsInBattleState", IsInBattleState);
		L.RegFunction("IsInMainState", IsInMainState);
		L.RegFunction("ToggleEnableNetworkLog", ToggleEnableNetworkLog);
		L.RegFunction("ResetNetworkLog", ResetNetworkLog);
		L.RegFunction("ToggleShowNetworkLog", ToggleShowNetworkLog);
		L.RegFunction("SetNetworkDelay", SetNetworkDelay);
		L.RegFunction("OnGUI1", OnGUI1);
		L.RegFunction("HandleLog", HandleLog);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("objMain", get_objMain, set_objMain);
		L.RegVar("isEditor", get_isEditor, set_isEditor);
		L.RegVar("sendErroReport", get_sendErroReport, set_sendErroReport);
		L.RegVar("FixWidth", get_FixWidth, null);
		L.RegVar("FixHeight", get_FixHeight, null);
		L.RegVar("TableMgr", get_TableMgr, null);
		L.RegVar("WorldBlockInfo", get_WorldBlockInfo, null);
		L.RegVar("Instance", get_Instance, null);
		L.RegVar("CurrentGameState", get_CurrentGameState, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBlockInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Main obj = (Main)ToLua.CheckObject(L, 1, typeof(Main));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int o = obj.GetBlockInfo(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int isOccupied(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Main obj = (Main)ToLua.CheckObject(L, 1, typeof(Main));
			WorldObjectType arg0 = (WorldObjectType)ToLua.CheckObject(L, 2, typeof(WorldObjectType));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			bool o = obj.isOccupied(arg0, arg1, arg2);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Restart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Main obj = (Main)ToLua.CheckObject(L, 1, typeof(Main));
			obj.Restart();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangeWorldBlockInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Main obj = (Main)ToLua.CheckObject(L, 1, typeof(Main));
			string arg0 = ToLua.CheckString(L, 2);
			obj.ChangeWorldBlockInfo(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReloadWorldBlockInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Main obj = (Main)ToLua.CheckObject(L, 1, typeof(Main));
			obj.ReloadWorldBlockInfo();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTableMgr(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Main obj = (Main)ToLua.CheckObject(L, 1, typeof(Main));
			Serclimax.ScTableMgr o = obj.GetTableMgr();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsBattleState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Main obj = (Main)ToLua.CheckObject(L, 1, typeof(Main));
			bool o = obj.IsBattleState();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangeGameState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Main obj = (Main)ToLua.CheckObject(L, 1, typeof(Main));
			State<GameState> arg0 = (State<GameState>)ToLua.CheckObject(L, 2, typeof(State<GameState>));
			string arg1 = ToLua.CheckString(L, 3);
			System.Action arg2 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (System.Action)ToLua.CheckObject(L, 4, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg2 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			obj.ChangeGameState(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsInInitState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Main obj = (Main)ToLua.CheckObject(L, 1, typeof(Main));
			bool o = obj.IsInInitState();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsInLoginState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Main obj = (Main)ToLua.CheckObject(L, 1, typeof(Main));
			bool o = obj.IsInLoginState();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsInBattleState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Main obj = (Main)ToLua.CheckObject(L, 1, typeof(Main));
			bool o = obj.IsInBattleState();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsInMainState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Main obj = (Main)ToLua.CheckObject(L, 1, typeof(Main));
			bool o = obj.IsInMainState();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToggleEnableNetworkLog(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Main obj = (Main)ToLua.CheckObject(L, 1, typeof(Main));
			obj.ToggleEnableNetworkLog();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetNetworkLog(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Main obj = (Main)ToLua.CheckObject(L, 1, typeof(Main));
			obj.ResetNetworkLog();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToggleShowNetworkLog(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Main obj = (Main)ToLua.CheckObject(L, 1, typeof(Main));
			obj.ToggleShowNetworkLog();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetNetworkDelay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Main obj = (Main)ToLua.CheckObject(L, 1, typeof(Main));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetNetworkDelay(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnGUI1(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Main obj = (Main)ToLua.CheckObject(L, 1, typeof(Main));
			obj.OnGUI1();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HandleLog(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Main obj = (Main)ToLua.CheckObject(L, 1, typeof(Main));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			UnityEngine.LogType arg2 = (UnityEngine.LogType)ToLua.CheckObject(L, 4, typeof(UnityEngine.LogType));
			obj.HandleLog(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_objMain(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Main.objMain);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isEditor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Main obj = (Main)o;
			bool ret = obj.isEditor;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isEditor on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sendErroReport(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Main obj = (Main)o;
			bool ret = obj.sendErroReport;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sendErroReport on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FixWidth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Main obj = (Main)o;
			int ret = obj.FixWidth;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index FixWidth on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FixHeight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Main obj = (Main)o;
			int ret = obj.FixHeight;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index FixHeight on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TableMgr(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Main obj = (Main)o;
			Serclimax.ScTableMgr ret = obj.TableMgr;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TableMgr on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WorldBlockInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Main obj = (Main)o;
			WorldBlockInfo ret = obj.WorldBlockInfo;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index WorldBlockInfo on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Main.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentGameState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Main obj = (Main)o;
			State<GameState> ret = obj.CurrentGameState;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CurrentGameState on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_objMain(IntPtr L)
	{
		try
		{
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			Main.objMain = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isEditor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Main obj = (Main)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isEditor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isEditor on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sendErroReport(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Main obj = (Main)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.sendErroReport = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sendErroReport on a nil value" : e.Message);
		}
	}
}

