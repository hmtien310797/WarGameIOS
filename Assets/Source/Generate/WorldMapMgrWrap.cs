//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class WorldMapMgrWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(WorldMapMgr), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("MobaMinPosX", MobaMinPosX);
		L.RegFunction("MobaMinPosY", MobaMinPosY);
		L.RegFunction("FollowId", FollowId);
		L.RegFunction("SetSelfInfo", SetSelfInfo);
		L.RegFunction("ShowRectMinX", ShowRectMinX);
		L.RegFunction("ShowRectMinY", ShowRectMinY);
		L.RegFunction("ShowRectMaxX", ShowRectMaxX);
		L.RegFunction("ShowRectMaxY", ShowRectMaxY);
		L.RegFunction("CameraRotationY", CameraRotationY);
		L.RegFunction("Awake", Awake);
		L.RegFunction("GoPos", GoPos);
		L.RegFunction("SetSprite", SetSprite);
		L.RegFunction("ClearSprite", ClearSprite);
		L.RegFunction("UpdateSprite", UpdateSprite);
		L.RegFunction("ClearTerrain", ClearTerrain);
		L.RegFunction("SetTerrain", SetTerrain);
		L.RegFunction("SetSEntryData", SetSEntryData);
		L.RegFunction("ShowTileInfo", ShowTileInfo);
		L.RegFunction("TileInfo", TileInfo);
		L.RegFunction("GetPathMsg", GetPathMsg);
		L.RegFunction("VaildTilePos", VaildTilePos);
		L.RegFunction("UpdateTerrain", UpdateTerrain);
		L.RegFunction("PlayEffect", PlayEffect);
		L.RegFunction("GetCacheBuildTrf", GetCacheBuildTrf);
		L.RegFunction("GetSprite", GetSprite);
		L.RegFunction("OverlayPosition", OverlayPosition);
		L.RegFunction("GetBorderData", GetBorderData);
		L.RegFunction("GetUnionBuildPreview", GetUnionBuildPreview);
		L.RegFunction("MapBgClick", MapBgClick);
		L.RegFunction("SelectTile", SelectTile);
		L.RegFunction("GetCurPosToWorldPos", GetCurPosToWorldPos);
		L.RegFunction("CameraCurPosToWorldPos", CameraCurPosToWorldPos);
		L.RegFunction("FollowAircraft", FollowAircraft);
		L.RegFunction("SetCamera", SetCamera);
		L.RegFunction("AddLine", AddLine);
		L.RegFunction("DrawLine", DrawLine);
		L.RegFunction("ClearLine", ClearLine);
		L.RegFunction("TerritoryShow", TerritoryShow);
		L.RegFunction("TerritoryHide", TerritoryHide);
		L.RegFunction("ShowTerritoryName", ShowTerritoryName);
		L.RegFunction("CameraMove", CameraMove);
		L.RegFunction("GetData", GetData);
		L.RegFunction("GetInitPos", GetInitPos);
		L.RegFunction("RequestData", RequestData);
		L.RegFunction("RequestAll", RequestAll);
		L.RegFunction("OnDestroy", OnDestroy);
		L.RegFunction("ShowEffect", ShowEffect);
		L.RegFunction("HideEffect", HideEffect);
		L.RegFunction("SetHomeData", SetHomeData);
		L.RegFunction("RemoveHomeData", RemoveHomeData);
		L.RegFunction("ClearPathData", ClearPathData);
		L.RegFunction("SetCustomLine", SetCustomLine);
		L.RegFunction("RemoveCustomLine", RemoveCustomLine);
		L.RegFunction("SetPathData", SetPathData);
		L.RegFunction("FollowRebelSurround", FollowRebelSurround);
		L.RegFunction("MapVersion", MapVersion);
		L.RegFunction("GetMapData", GetMapData);
		L.RegFunction("PathVersion", PathVersion);
		L.RegFunction("GetPathData", GetPathData);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("instance", get_instance, set_instance);
		L.RegVar("IsDebug", get_IsDebug, set_IsDebug);
		L.RegVar("world", get_world, set_world);
		L.RegVar("worldCamera", get_worldCamera, set_worldCamera);
		L.RegVar("NoUpdateWorld", get_NoUpdateWorld, set_NoUpdateWorld);
		L.RegVar("UsedLocalData", get_UsedLocalData, set_UsedLocalData);
		L.RegVar("SupportCameraMove", get_SupportCameraMove, set_SupportCameraMove);
		L.RegVar("SupportGuide", get_SupportGuide, set_SupportGuide);
		L.RegVar("InitX", get_InitX, set_InitX);
		L.RegVar("InitY", get_InitY, set_InitY);
		L.RegVar("CenterX", get_CenterX, set_CenterX);
		L.RegVar("CenterY", get_CenterY, set_CenterY);
		L.RegVar("Width", get_Width, set_Width);
		L.RegVar("curPos", get_curPos, set_curPos);
		L.RegVar("OnMoveEvent", get_OnMoveEvent, set_OnMoveEvent);
		L.RegVar("OnCenterMoveEvent", get_OnCenterMoveEvent, set_OnCenterMoveEvent);
		L.RegVar("onUpdateMapData", get_onUpdateMapData, set_onUpdateMapData);
		L.RegVar("onUpdatePathData", get_onUpdatePathData, set_onUpdatePathData);
		L.RegVar("RebelPathId", get_RebelPathId, set_RebelPathId);
		L.RegVar("RangeMgr", get_RangeMgr, set_RangeMgr);
		L.RegVar("CenterPos", get_CenterPos, set_CenterPos);
		L.RegVar("Instance", get_Instance, null);
		L.RegVar("CharId", get_CharId, set_CharId);
		L.RegVar("GuildId", get_GuildId, set_GuildId);
		L.RegFunction("OnUpdatePathDataCB", WorldMapMgr_OnUpdatePathDataCB);
		L.RegFunction("OnUpdateMapDataCB", WorldMapMgr_OnUpdateMapDataCB);
		L.RegFunction("CenterMoveEvent", WorldMapMgr_CenterMoveEvent);
		L.RegFunction("MoveEvent", WorldMapMgr_MoveEvent);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MobaMinPosX(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int o = obj.MobaMinPosX();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MobaMinPosY(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int o = obj.MobaMinPosY();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FollowId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int o = obj.FollowId();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSelfInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.SetSelfInfo(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowRectMinX(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int o = obj.ShowRectMinX();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowRectMinY(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int o = obj.ShowRectMinY();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowRectMaxX(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int o = obj.ShowRectMaxX();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowRectMaxY(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int o = obj.ShowRectMaxY();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CameraRotationY(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int o = obj.CameraRotationY();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Awake(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			obj.Awake();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GoPos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.GoPos(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			obj.SetSprite(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			obj.ClearSprite();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			obj.UpdateSprite();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearTerrain(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			obj.ClearTerrain();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTerrain(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.SetTerrain(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSEntryData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(WorldMapMgr), typeof(ProtoMsg.SEntryData)))
			{
				WorldMapMgr obj = (WorldMapMgr)ToLua.ToObject(L, 1);
				ProtoMsg.SEntryData arg0 = (ProtoMsg.SEntryData)ToLua.ToObject(L, 2);
				obj.SetSEntryData(arg0);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(WorldMapMgr), typeof(byte[]), typeof(int), typeof(int)))
			{
				WorldMapMgr obj = (WorldMapMgr)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.SetSEntryData(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldMapMgr.SetSEntryData");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowTileInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
			ProtoMsg.SEntryData o = obj.ShowTileInfo(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TileInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
			byte[] o = obj.TileInfo(arg0, arg1);
			ToLua.Push(L, new LuaByteBuffer(o));
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPathMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			byte[] o = obj.GetPathMsg(arg0);
			ToLua.Push(L, new LuaByteBuffer(o));
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int VaildTilePos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
			bool o = obj.VaildTilePos(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateTerrain(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			obj.UpdateTerrain();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			obj.PlayEffect(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCacheBuildTrf(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			UnityEngine.Transform o = obj.GetCacheBuildTrf(arg0, arg1, arg2, arg3);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int o = obj.GetSprite(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlayPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			obj.OverlayPosition(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBorderData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			BorderData o = obj.GetBorderData();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUnionBuildPreview(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			TerrainUnionBuildPreview o = obj.GetUnionBuildPreview();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MapBgClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			byte[] o = obj.MapBgClick(arg0);
			ToLua.Push(L, new LuaByteBuffer(o));
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SelectTile(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldMapMgr), typeof(int), typeof(int)))
			{
				WorldMapMgr obj = (WorldMapMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.SelectTile(arg0, arg1);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(WorldMapMgr), typeof(int), typeof(int), typeof(int), typeof(int)))
			{
				WorldMapMgr obj = (WorldMapMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 5);
				obj.SelectTile(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldMapMgr.SelectTile");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurPosToWorldPos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			UnityEngine.Vector3 o = obj.GetCurPosToWorldPos(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CameraCurPosToWorldPos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			UnityEngine.Vector3 o = obj.CameraCurPosToWorldPos(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FollowAircraft(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.FollowAircraft(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.SetCamera(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			ProtoMsg.SEntryPathInfo arg0 = (ProtoMsg.SEntryPathInfo)ToLua.CheckObject(L, 2, typeof(ProtoMsg.SEntryPathInfo));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
			UnityEngine.Color arg5 = ToLua.ToColor(L, 7);
			obj.AddLine(arg0, arg1, arg2, arg3, arg4, arg5);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawLine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			obj.DrawLine();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearLine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			obj.ClearLine();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TerritoryShow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			obj.TerritoryShow();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TerritoryHide(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			obj.TerritoryHide();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowTerritoryName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ShowTerritoryName(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CameraMove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.CameraMove(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			obj.GetData();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInitPos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			UnityEngine.Vector2 o = obj.GetInitPos();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RequestData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			Vec2Int arg0 = (Vec2Int)ToLua.CheckObject(L, 2, typeof(Vec2Int));
			obj.RequestData(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RequestAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			obj.RequestAll();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			obj.OnDestroy();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			obj.ShowEffect(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.HideEffect(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetHomeData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			string arg4 = ToLua.CheckString(L, 6);
			int arg5 = (int)LuaDLL.luaL_checknumber(L, 7);
			obj.SetHomeData(arg0, arg1, arg2, arg3, arg4, arg5);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveHomeData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.RemoveHomeData(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearPathData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			obj.ClearPathData();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCustomLine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 8);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
			UnityEngine.Color arg5 = ToLua.ToColor(L, 7);
			float arg6 = (float)LuaDLL.luaL_checknumber(L, 8);
			obj.SetCustomLine(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveCustomLine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			string arg0 = ToLua.CheckString(L, 2);
			obj.RemoveCustomLine(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPathData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 10);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			string arg4 = ToLua.CheckString(L, 6);
			int arg5 = (int)LuaDLL.luaL_checknumber(L, 7);
			int arg6 = (int)LuaDLL.luaL_checknumber(L, 8);
			int arg7 = (int)LuaDLL.luaL_checknumber(L, 9);
			string arg8 = ToLua.CheckString(L, 10);
			obj.SetPathData(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FollowRebelSurround(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			obj.FollowRebelSurround();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MapVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int o = obj.MapVersion();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMapData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			byte[] o = obj.GetMapData();
			ToLua.Push(L, new LuaByteBuffer(o));
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PathVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			int o = obj.PathVersion();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPathData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldMapMgr obj = (WorldMapMgr)ToLua.CheckObject(L, 1, typeof(WorldMapMgr));
			byte[] o = obj.GetPathData();
			ToLua.Push(L, new LuaByteBuffer(o));
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, WorldMapMgr.instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsDebug(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, WorldMapMgr.IsDebug);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_world(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			World ret = obj.world;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index world on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_worldCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			World3DCamera ret = obj.worldCamera;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index worldCamera on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NoUpdateWorld(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			bool ret = obj.NoUpdateWorld;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index NoUpdateWorld on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UsedLocalData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			bool ret = obj.UsedLocalData;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UsedLocalData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SupportCameraMove(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			bool ret = obj.SupportCameraMove;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SupportCameraMove on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SupportGuide(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			bool ret = obj.SupportGuide;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SupportGuide on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InitX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			int ret = obj.InitX;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index InitX on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InitY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			int ret = obj.InitY;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index InitY on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CenterX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			int ret = obj.CenterX;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CenterX on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CenterY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			int ret = obj.CenterY;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CenterY on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Width(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			int ret = obj.Width;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Width on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_curPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			UnityEngine.Vector2 ret = obj.curPos;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index curPos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnMoveEvent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			WorldMapMgr.MoveEvent ret = obj.OnMoveEvent;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnMoveEvent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnCenterMoveEvent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			WorldMapMgr.CenterMoveEvent ret = obj.OnCenterMoveEvent;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnCenterMoveEvent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onUpdateMapData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			WorldMapMgr.OnUpdateMapDataCB ret = obj.onUpdateMapData;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onUpdateMapData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onUpdatePathData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			WorldMapMgr.OnUpdatePathDataCB ret = obj.onUpdatePathData;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onUpdatePathData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RebelPathId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			uint ret = obj.RebelPathId;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RebelPathId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RangeMgr(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			FortRangeMgr ret = obj.RangeMgr;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RangeMgr on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CenterPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			Vec2Int ret = obj.CenterPos;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CenterPos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, WorldMapMgr.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CharId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			int ret = obj.CharId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CharId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GuildId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			int ret = obj.GuildId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index GuildId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_instance(IntPtr L)
	{
		try
		{
			WorldMapMgr arg0 = (WorldMapMgr)ToLua.CheckUnityObject(L, 2, typeof(WorldMapMgr));
			WorldMapMgr.instance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsDebug(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			WorldMapMgr.IsDebug = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_world(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			World arg0 = (World)ToLua.CheckUnityObject(L, 2, typeof(World));
			obj.world = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index world on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_worldCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			World3DCamera arg0 = (World3DCamera)ToLua.CheckUnityObject(L, 2, typeof(World3DCamera));
			obj.worldCamera = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index worldCamera on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NoUpdateWorld(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.NoUpdateWorld = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index NoUpdateWorld on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UsedLocalData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.UsedLocalData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UsedLocalData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SupportCameraMove(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SupportCameraMove = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SupportCameraMove on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SupportGuide(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SupportGuide = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SupportGuide on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_InitX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.InitX = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index InitX on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_InitY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.InitY = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index InitY on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CenterX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.CenterX = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CenterX on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CenterY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.CenterY = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CenterY on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Width(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Width = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Width on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_curPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.curPos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index curPos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnMoveEvent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			WorldMapMgr.MoveEvent arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (WorldMapMgr.MoveEvent)ToLua.CheckObject(L, 2, typeof(WorldMapMgr.MoveEvent));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(WorldMapMgr.MoveEvent), func) as WorldMapMgr.MoveEvent;
			}

			obj.OnMoveEvent = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnMoveEvent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnCenterMoveEvent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			WorldMapMgr.CenterMoveEvent arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (WorldMapMgr.CenterMoveEvent)ToLua.CheckObject(L, 2, typeof(WorldMapMgr.CenterMoveEvent));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(WorldMapMgr.CenterMoveEvent), func) as WorldMapMgr.CenterMoveEvent;
			}

			obj.OnCenterMoveEvent = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnCenterMoveEvent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onUpdateMapData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			WorldMapMgr.OnUpdateMapDataCB arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (WorldMapMgr.OnUpdateMapDataCB)ToLua.CheckObject(L, 2, typeof(WorldMapMgr.OnUpdateMapDataCB));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(WorldMapMgr.OnUpdateMapDataCB), func) as WorldMapMgr.OnUpdateMapDataCB;
			}

			obj.onUpdateMapData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onUpdateMapData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onUpdatePathData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			WorldMapMgr.OnUpdatePathDataCB arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (WorldMapMgr.OnUpdatePathDataCB)ToLua.CheckObject(L, 2, typeof(WorldMapMgr.OnUpdatePathDataCB));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(WorldMapMgr.OnUpdatePathDataCB), func) as WorldMapMgr.OnUpdatePathDataCB;
			}

			obj.onUpdatePathData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onUpdatePathData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RebelPathId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.RebelPathId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RebelPathId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RangeMgr(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			FortRangeMgr arg0 = (FortRangeMgr)ToLua.CheckUnityObject(L, 2, typeof(FortRangeMgr));
			obj.RangeMgr = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RangeMgr on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CenterPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			Vec2Int arg0 = (Vec2Int)ToLua.CheckObject(L, 2, typeof(Vec2Int));
			obj.CenterPos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CenterPos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CharId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.CharId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CharId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GuildId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMapMgr obj = (WorldMapMgr)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.GuildId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index GuildId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WorldMapMgr_OnUpdatePathDataCB(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			Delegate arg1 = DelegateFactory.CreateDelegate(typeof(WorldMapMgr.OnUpdatePathDataCB), func);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WorldMapMgr_OnUpdateMapDataCB(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			Delegate arg1 = DelegateFactory.CreateDelegate(typeof(WorldMapMgr.OnUpdateMapDataCB), func);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WorldMapMgr_CenterMoveEvent(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			Delegate arg1 = DelegateFactory.CreateDelegate(typeof(WorldMapMgr.CenterMoveEvent), func);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WorldMapMgr_MoveEvent(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			Delegate arg1 = DelegateFactory.CreateDelegate(typeof(WorldMapMgr.MoveEvent), func);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

