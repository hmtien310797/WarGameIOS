//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class BuglyAgentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(BuglyAgent), typeof(System.Object));
		L.RegFunction("ConfigCrashReporter", ConfigCrashReporter);
		L.RegFunction("InitWithAppId", InitWithAppId);
		L.RegFunction("EnableExceptionHandler", EnableExceptionHandler);
		L.RegFunction("RegisterLogCallback", RegisterLogCallback);
		L.RegFunction("SetLogCallbackExtrasHandler", SetLogCallbackExtrasHandler);
		L.RegFunction("ReportException", ReportException);
		L.RegFunction("UnregisterLogCallback", UnregisterLogCallback);
		L.RegFunction("SetUserId", SetUserId);
		L.RegFunction("SetScene", SetScene);
		L.RegFunction("AddSceneData", AddSceneData);
		L.RegFunction("ConfigDebugMode", ConfigDebugMode);
		L.RegFunction("ConfigAutoQuitApplication", ConfigAutoQuitApplication);
		L.RegFunction("ConfigAutoReportLogLevel", ConfigAutoReportLogLevel);
		L.RegFunction("ConfigDefault", ConfigDefault);
		L.RegFunction("DebugLog", DebugLog);
		L.RegFunction("PrintLog", PrintLog);
		L.RegFunction("New", _CreateBuglyAgent);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("PluginVersion", get_PluginVersion, null);
		L.RegVar("IsInitialized", get_IsInitialized, null);
		L.RegVar("AutoQuitApplicationAfterReport", get_AutoQuitApplicationAfterReport, null);
		L.RegFunction("LogCallbackDelegate", BuglyAgent_LogCallbackDelegate);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateBuglyAgent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				BuglyAgent obj = new BuglyAgent();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: BuglyAgent.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConfigCrashReporter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			BuglyAgent.ConfigCrashReporter(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitWithAppId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			BuglyAgent.InitWithAppId(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnableExceptionHandler(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			BuglyAgent.EnableExceptionHandler();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterLogCallback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BuglyAgent.LogCallbackDelegate arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (BuglyAgent.LogCallbackDelegate)ToLua.CheckObject(L, 1, typeof(BuglyAgent.LogCallbackDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(BuglyAgent.LogCallbackDelegate), func) as BuglyAgent.LogCallbackDelegate;
			}

			BuglyAgent.RegisterLogCallback(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLogCallbackExtrasHandler(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<System.Collections.Generic.Dictionary<string,string>> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Func<System.Collections.Generic.Dictionary<string,string>>)ToLua.CheckObject(L, 1, typeof(System.Func<System.Collections.Generic.Dictionary<string,string>>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Func<System.Collections.Generic.Dictionary<string,string>>), func) as System.Func<System.Collections.Generic.Dictionary<string,string>>;
			}

			BuglyAgent.SetLogCallbackExtrasHandler(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReportException(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.Exception), typeof(string)))
			{
				System.Exception arg0 = (System.Exception)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				BuglyAgent.ReportException(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(string), typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				BuglyAgent.ReportException(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BuglyAgent.ReportException");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnregisterLogCallback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BuglyAgent.LogCallbackDelegate arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (BuglyAgent.LogCallbackDelegate)ToLua.CheckObject(L, 1, typeof(BuglyAgent.LogCallbackDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(BuglyAgent.LogCallbackDelegate), func) as BuglyAgent.LogCallbackDelegate;
			}

			BuglyAgent.UnregisterLogCallback(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetUserId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			BuglyAgent.SetUserId(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			BuglyAgent.SetScene(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddSceneData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			BuglyAgent.AddSceneData(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConfigDebugMode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			BuglyAgent.ConfigDebugMode(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConfigAutoQuitApplication(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			BuglyAgent.ConfigAutoQuitApplication(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConfigAutoReportLogLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LogSeverity arg0 = (LogSeverity)ToLua.CheckObject(L, 1, typeof(LogSeverity));
			BuglyAgent.ConfigAutoReportLogLevel(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConfigDefault(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			long arg3 = (long)LuaDLL.luaL_checknumber(L, 4);
			BuglyAgent.ConfigDefault(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DebugLog(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			object[] arg2 = ToLua.ToParamsObject(L, 3, count - 2);
			BuglyAgent.DebugLog(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PrintLog(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LogSeverity arg0 = (LogSeverity)ToLua.CheckObject(L, 1, typeof(LogSeverity));
			string arg1 = ToLua.CheckString(L, 2);
			object[] arg2 = ToLua.ToParamsObject(L, 3, count - 2);
			BuglyAgent.PrintLog(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PluginVersion(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, BuglyAgent.PluginVersion);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsInitialized(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, BuglyAgent.IsInitialized);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AutoQuitApplicationAfterReport(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, BuglyAgent.AutoQuitApplicationAfterReport);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BuglyAgent_LogCallbackDelegate(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			Delegate arg1 = DelegateFactory.CreateDelegate(typeof(BuglyAgent.LogCallbackDelegate), func);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

