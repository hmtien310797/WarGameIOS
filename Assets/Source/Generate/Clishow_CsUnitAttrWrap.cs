//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Clishow_CsUnitAttrWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Clishow.CsUnitAttr), typeof(System.Object));
		L.RegFunction("New", _CreateClishow_CsUnitAttr);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("TeamId", get_TeamId, set_TeamId);
		L.RegVar("HP", get_HP, set_HP);
		L.RegVar("MaxHP", get_MaxHP, set_MaxHP);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateClishow_CsUnitAttr(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Clishow.CsUnitAttr obj = new Clishow.CsUnitAttr();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Clishow.CsUnitAttr.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TeamId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnitAttr obj = (Clishow.CsUnitAttr)o;
			int ret = obj.TeamId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TeamId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnitAttr obj = (Clishow.CsUnitAttr)o;
			int ret = obj.HP;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index HP on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxHP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnitAttr obj = (Clishow.CsUnitAttr)o;
			int ret = obj.MaxHP;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MaxHP on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TeamId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnitAttr obj = (Clishow.CsUnitAttr)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.TeamId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TeamId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnitAttr obj = (Clishow.CsUnitAttr)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.HP = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index HP on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MaxHP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnitAttr obj = (Clishow.CsUnitAttr)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.MaxHP = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MaxHP on a nil value" : e.Message);
		}
	}
}

