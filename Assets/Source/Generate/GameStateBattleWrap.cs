//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameStateBattleWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameStateBattle), typeof(GameState));
		L.RegFunction("SetPVPBattleStartResponse", SetPVPBattleStartResponse);
		L.RegFunction("SetPveMonsterBattleStartResponse", SetPveMonsterBattleStartResponse);
		L.RegFunction("SetGuildMonsterBattleStartResponse", SetGuildMonsterBattleStartResponse);
		L.RegFunction("SetRandomBattleStartResponse", SetRandomBattleStartResponse);
		L.RegFunction("SyncTime", SyncTime);
		L.RegFunction("Restart", Restart);
		L.RegFunction("OnEnter", OnEnter);
		L.RegFunction("RequsetPVPBattleEnd", RequsetPVPBattleEnd);
		L.RegFunction("OnUpdate", OnUpdate);
		L.RegFunction("OnFixedUpdate", OnFixedUpdate);
		L.RegFunction("OnLeave", OnLeave);
		L.RegFunction("StartLevel", StartLevel);
		L.RegFunction("OnBattleInited", OnBattleInited);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("activeId", get_activeId, set_activeId);
		L.RegVar("missionId", get_missionId, set_missionId);
		L.RegVar("pveMonsterUid", get_pveMonsterUid, set_pveMonsterUid);
		L.RegVar("heroInfoDataList", get_heroInfoDataList, set_heroInfoDataList);
		L.RegVar("Instance", get_Instance, null);
		L.RegVar("BattleId", get_BattleId, set_BattleId);
		L.RegVar("CharaUid", get_CharaUid, set_CharaUid);
		L.RegVar("PvpTeam", get_PvpTeam, set_PvpTeam);
		L.RegVar("IsPvpBattle", get_IsPvpBattle, set_IsPvpBattle);
		L.RegVar("IsRandomBattle", get_IsRandomBattle, null);
		L.RegVar("IsGuildMonsterBattle", get_IsGuildMonsterBattle, null);
		L.RegVar("IsPveMonsterBattle", get_IsPveMonsterBattle, null);
		L.RegVar("IsCommonBattle", get_IsCommonBattle, null);
		L.RegVar("SelectArmy", get_SelectArmy, null);
		L.RegVar("BattleStartResponse", get_BattleStartResponse, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPVPBattleStartResponse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			GameStateBattle obj = (GameStateBattle)ToLua.CheckObject(L, 1, typeof(GameStateBattle));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
			Clishow.CsLockStepSynchronizer.DisposeMsgCallback arg2 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (Clishow.CsLockStepSynchronizer.DisposeMsgCallback)ToLua.CheckObject(L, 4, typeof(Clishow.CsLockStepSynchronizer.DisposeMsgCallback));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg2 = DelegateFactory.CreateDelegate(typeof(Clishow.CsLockStepSynchronizer.DisposeMsgCallback), func) as Clishow.CsLockStepSynchronizer.DisposeMsgCallback;
			}

			byte[] arg3 = ToLua.CheckByteBuffer(L, 5);
			byte[] arg4 = ToLua.CheckByteBuffer(L, 6);
			obj.SetPVPBattleStartResponse(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPveMonsterBattleStartResponse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			GameStateBattle obj = (GameStateBattle)ToLua.CheckObject(L, 1, typeof(GameStateBattle));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
			byte[] arg2 = ToLua.CheckByteBuffer(L, 4);
			obj.SetPveMonsterBattleStartResponse(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetGuildMonsterBattleStartResponse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			GameStateBattle obj = (GameStateBattle)ToLua.CheckObject(L, 1, typeof(GameStateBattle));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
			uint arg2 = (uint)LuaDLL.luaL_checknumber(L, 4);
			byte[] arg3 = ToLua.CheckByteBuffer(L, 5);
			obj.SetGuildMonsterBattleStartResponse(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRandomBattleStartResponse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			GameStateBattle obj = (GameStateBattle)ToLua.CheckObject(L, 1, typeof(GameStateBattle));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
			byte[] arg2 = ToLua.CheckByteBuffer(L, 4);
			obj.SetRandomBattleStartResponse(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SyncTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GameStateBattle obj = (GameStateBattle)ToLua.CheckObject(L, 1, typeof(GameStateBattle));
			ulong arg0 = (ulong)LuaDLL.luaL_checknumber(L, 2);
			ulong arg1 = (ulong)LuaDLL.luaL_checknumber(L, 3);
			obj.SyncTime(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Restart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameStateBattle obj = (GameStateBattle)ToLua.CheckObject(L, 1, typeof(GameStateBattle));
			obj.Restart();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnEnter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GameStateBattle obj = (GameStateBattle)ToLua.CheckObject(L, 1, typeof(GameStateBattle));
			string arg0 = ToLua.CheckString(L, 2);
			System.Action arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action)ToLua.CheckObject(L, 3, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			obj.OnEnter(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RequsetPVPBattleEnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameStateBattle obj = (GameStateBattle)ToLua.CheckObject(L, 1, typeof(GameStateBattle));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.RequsetPVPBattleEnd(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameStateBattle obj = (GameStateBattle)ToLua.CheckObject(L, 1, typeof(GameStateBattle));
			obj.OnUpdate();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnFixedUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameStateBattle obj = (GameStateBattle)ToLua.CheckObject(L, 1, typeof(GameStateBattle));
			obj.OnFixedUpdate();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnLeave(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameStateBattle obj = (GameStateBattle)ToLua.CheckObject(L, 1, typeof(GameStateBattle));
			obj.OnLeave();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GameStateBattle obj = (GameStateBattle)ToLua.CheckObject(L, 1, typeof(GameStateBattle));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.StartLevel(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnBattleInited(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameStateBattle obj = (GameStateBattle)ToLua.CheckObject(L, 1, typeof(GameStateBattle));
			obj.OnBattleInited();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_activeId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateBattle obj = (GameStateBattle)o;
			uint ret = obj.activeId;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index activeId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_missionId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateBattle obj = (GameStateBattle)o;
			uint ret = obj.missionId;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index missionId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pveMonsterUid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateBattle obj = (GameStateBattle)o;
			uint ret = obj.pveMonsterUid;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pveMonsterUid on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_heroInfoDataList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateBattle obj = (GameStateBattle)o;
			System.Collections.Generic.List<byte[]> ret = obj.heroInfoDataList;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index heroInfoDataList on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, GameStateBattle.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BattleId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateBattle obj = (GameStateBattle)o;
			int ret = obj.BattleId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BattleId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CharaUid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateBattle obj = (GameStateBattle)o;
			int ret = obj.CharaUid;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CharaUid on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PvpTeam(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateBattle obj = (GameStateBattle)o;
			uint ret = obj.PvpTeam;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PvpTeam on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsPvpBattle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateBattle obj = (GameStateBattle)o;
			bool ret = obj.IsPvpBattle;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsPvpBattle on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsRandomBattle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateBattle obj = (GameStateBattle)o;
			bool ret = obj.IsRandomBattle;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsRandomBattle on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsGuildMonsterBattle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateBattle obj = (GameStateBattle)o;
			bool ret = obj.IsGuildMonsterBattle;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsGuildMonsterBattle on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsPveMonsterBattle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateBattle obj = (GameStateBattle)o;
			bool ret = obj.IsPveMonsterBattle;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsPveMonsterBattle on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsCommonBattle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateBattle obj = (GameStateBattle)o;
			bool ret = obj.IsCommonBattle;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsCommonBattle on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SelectArmy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateBattle obj = (GameStateBattle)o;
			System.Collections.Generic.List<int> ret = obj.SelectArmy;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SelectArmy on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BattleStartResponse(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateBattle obj = (GameStateBattle)o;
			ProtoMsg.MsgBattleStartResponse ret = obj.BattleStartResponse;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BattleStartResponse on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_activeId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateBattle obj = (GameStateBattle)o;
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.activeId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index activeId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_missionId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateBattle obj = (GameStateBattle)o;
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.missionId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index missionId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pveMonsterUid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateBattle obj = (GameStateBattle)o;
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.pveMonsterUid = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pveMonsterUid on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_heroInfoDataList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateBattle obj = (GameStateBattle)o;
			System.Collections.Generic.List<byte[]> arg0 = (System.Collections.Generic.List<byte[]>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<byte[]>));
			obj.heroInfoDataList = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index heroInfoDataList on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BattleId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateBattle obj = (GameStateBattle)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.BattleId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BattleId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CharaUid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateBattle obj = (GameStateBattle)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.CharaUid = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CharaUid on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PvpTeam(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateBattle obj = (GameStateBattle)o;
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.PvpTeam = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PvpTeam on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsPvpBattle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateBattle obj = (GameStateBattle)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsPvpBattle = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsPvpBattle on a nil value" : e.Message);
		}
	}
}

