//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameStateLoginWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameStateLogin), typeof(GameState));
		L.RegFunction("GetZoneId", GetZoneId);
		L.RegFunction("OnEnter", OnEnter);
		L.RegFunction("OnUpdate", OnUpdate);
		L.RegFunction("OnFixedUpdate", OnFixedUpdate);
		L.RegFunction("OnLeave", OnLeave);
		L.RegFunction("StateChange2AccountLogin", StateChange2AccountLogin);
		L.RegFunction("SettingAccountLogout", SettingAccountLogout);
		L.RegFunction("SelectCounty", SelectCounty);
		L.RegFunction("ResetCountry", ResetCountry);
		L.RegFunction("Login", Login);
		L.RegFunction("EditorLogin", EditorLogin);
		L.RegFunction("SDKLogin", SDKLogin);
		L.RegFunction("SDKBind", SDKBind);
		L.RegFunction("CancelUpdateVersion", CancelUpdateVersion);
		L.RegFunction("OnRequestServerList", OnRequestServerList);
		L.RegFunction("ReLogin", ReLogin);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("RANDOM_TIMES", get_RANDOM_TIMES, null);
		L.RegVar("state", get_state, set_state);
		L.RegVar("Instance", get_Instance, null);
		L.RegFunction("OnSDKBind", GameStateLogin_OnSDKBind);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetZoneId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameStateLogin obj = (GameStateLogin)ToLua.CheckObject(L, 1, typeof(GameStateLogin));
			int o = obj.GetZoneId();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnEnter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GameStateLogin obj = (GameStateLogin)ToLua.CheckObject(L, 1, typeof(GameStateLogin));
			string arg0 = ToLua.CheckString(L, 2);
			System.Action arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action)ToLua.CheckObject(L, 3, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			obj.OnEnter(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameStateLogin obj = (GameStateLogin)ToLua.CheckObject(L, 1, typeof(GameStateLogin));
			obj.OnUpdate();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnFixedUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameStateLogin obj = (GameStateLogin)ToLua.CheckObject(L, 1, typeof(GameStateLogin));
			obj.OnFixedUpdate();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnLeave(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameStateLogin obj = (GameStateLogin)ToLua.CheckObject(L, 1, typeof(GameStateLogin));
			obj.OnLeave();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StateChange2AccountLogin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameStateLogin obj = (GameStateLogin)ToLua.CheckObject(L, 1, typeof(GameStateLogin));
			obj.StateChange2AccountLogin();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SettingAccountLogout(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameStateLogin obj = (GameStateLogin)ToLua.CheckObject(L, 1, typeof(GameStateLogin));
			string arg0 = ToLua.CheckString(L, 2);
			obj.SettingAccountLogout(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SelectCounty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameStateLogin obj = (GameStateLogin)ToLua.CheckObject(L, 1, typeof(GameStateLogin));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SelectCounty(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetCountry(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameStateLogin obj = (GameStateLogin)ToLua.CheckObject(L, 1, typeof(GameStateLogin));
			obj.ResetCountry();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Login(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			GameStateLogin obj = (GameStateLogin)ToLua.CheckObject(L, 1, typeof(GameStateLogin));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			byte[] arg2 = ToLua.CheckByteBuffer(L, 4);
			obj.Login(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EditorLogin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			GameStateLogin obj = (GameStateLogin)ToLua.CheckObject(L, 1, typeof(GameStateLogin));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			obj.EditorLogin(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SDKLogin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameStateLogin obj = (GameStateLogin)ToLua.CheckObject(L, 1, typeof(GameStateLogin));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SDKLogin(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SDKBind(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GameStateLogin obj = (GameStateLogin)ToLua.CheckObject(L, 1, typeof(GameStateLogin));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameStateLogin.OnSDKBind arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (GameStateLogin.OnSDKBind)ToLua.CheckObject(L, 3, typeof(GameStateLogin.OnSDKBind));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(GameStateLogin.OnSDKBind), func) as GameStateLogin.OnSDKBind;
			}

			obj.SDKBind(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CancelUpdateVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameStateLogin obj = (GameStateLogin)ToLua.CheckObject(L, 1, typeof(GameStateLogin));
			obj.CancelUpdateVersion();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnRequestServerList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameStateLogin obj = (GameStateLogin)ToLua.CheckObject(L, 1, typeof(GameStateLogin));
			obj.OnRequestServerList();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReLogin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameStateLogin obj = (GameStateLogin)ToLua.CheckObject(L, 1, typeof(GameStateLogin));
			obj.ReLogin();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RANDOM_TIMES(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameStateLogin.RANDOM_TIMES);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_state(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateLogin obj = (GameStateLogin)o;
			GameStateLogin.EInitState ret = obj.state;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index state on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, GameStateLogin.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_state(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameStateLogin obj = (GameStateLogin)o;
			GameStateLogin.EInitState arg0 = (GameStateLogin.EInitState)ToLua.CheckObject(L, 2, typeof(GameStateLogin.EInitState));
			obj.state = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index state on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GameStateLogin_OnSDKBind(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			Delegate arg1 = DelegateFactory.CreateDelegate(typeof(GameStateLogin.OnSDKBind), func);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

