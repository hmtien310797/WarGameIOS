//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class WorldHUDMgrWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(WorldHUDMgr), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("Refresh", Refresh);
		L.RegFunction("InitializeHUD", InitializeHUD);
		L.RegFunction("RefreshHUD", RefreshHUD);
		L.RegFunction("Show", Show);
		L.RegFunction("Hide", Hide);
		L.RegFunction("Awake", Awake);
		L.RegFunction("SetWidgetColor", SetWidgetColor);
		L.RegFunction("SetWidgetIcon", SetWidgetIcon);
		L.RegFunction("SetWidgetIconType", SetWidgetIconType);
		L.RegFunction("SetWidgetX", SetWidgetX);
		L.RegFunction("SetWidgetY", SetWidgetY);
		L.RegFunction("SetWidgetLocalPosition", SetWidgetLocalPosition);
		L.RegFunction("SetWidgetPercentage", SetWidgetPercentage);
		L.RegFunction("SetWidgetText", SetWidgetText);
		L.RegFunction("SetWidgetType", SetWidgetType);
		L.RegFunction("SetTimerTimeStamp", SetTimerTimeStamp);
		L.RegFunction("SetTimerUpdateFunction", SetTimerUpdateFunction);
		L.RegFunction("ClearTimerStamp", ClearTimerStamp);
		L.RegFunction("GetWidgetWidth", GetWidgetWidth);
		L.RegFunction("PositionToId", PositionToId);
		L.RegFunction("IdToPosition", IdToPosition);
		L.RegFunction("IdToWorldPosition", IdToWorldPosition);
		L.RegFunction("GetPlayerID", GetPlayerID);
		L.RegFunction("GetPlayerGuildID", GetPlayerGuildID);
		L.RegFunction("GetDataUID", GetDataUID);
		L.RegFunction("GetDataEntryType", GetDataEntryType);
		L.RegFunction("GetBaseData", GetBaseData);
		L.RegFunction("GetBaseOwnerID", GetBaseOwnerID);
		L.RegFunction("GetBaseLevel", GetBaseLevel);
		L.RegFunction("GetBaseOfficialID", GetBaseOfficialID);
		L.RegFunction("GetBaseGuildOfficialID", GetBaseGuildOfficialID);
		L.RegFunction("GetBaseGuildTitle", GetBaseGuildTitle);
		L.RegFunction("GetBaseMilitaryRankId", GetBaseMilitaryRankId);
		L.RegFunction("GetBaseGuildID", GetBaseGuildID);
		L.RegFunction("GetBaseName", GetBaseName);
		L.RegFunction("GetBaseFortBadge", GetBaseFortBadge);
		L.RegFunction("GetBaseNationality", GetBaseNationality);
		L.RegFunction("HasPrisoner", HasPrisoner);
		L.RegFunction("GetResourceData", GetResourceData);
		L.RegFunction("GetResourceLevel", GetResourceLevel);
		L.RegFunction("GetResourceOwnerID", GetResourceOwnerID);
		L.RegFunction("GetOwerGuildData", GetOwerGuildData);
		L.RegFunction("GetOwnerGuildBadge", GetOwnerGuildBadge);
		L.RegFunction("GetOwnerGuildBanner", GetOwnerGuildBanner);
		L.RegFunction("GetOwnerGuildID", GetOwnerGuildID);
		L.RegFunction("GetOwnerGuildName", GetOwnerGuildName);
		L.RegFunction("GetEnemyData", GetEnemyData);
		L.RegFunction("GetEnemyHpPercentage", GetEnemyHpPercentage);
		L.RegFunction("GetEnemyLevel", GetEnemyLevel);
		L.RegFunction("GetRebelArmyTreasureData", GetRebelArmyTreasureData);
		L.RegFunction("GetRebelArmyTreasureName", GetRebelArmyTreasureName);
		L.RegFunction("GetAllianceBuildingData", GetAllianceBuildingData);
		L.RegFunction("GetAllianceBuildingID", GetAllianceBuildingID);
		L.RegFunction("DrawDukeBadge", DrawDukeBadge);
		L.RegFunction("DrawRebelArmyFortressBadge", DrawRebelArmyFortressBadge);
		L.RegFunction("DrawBubbleByOwner", DrawBubbleByOwner);
		L.RegFunction("DrawMobaBaseBubble", DrawMobaBaseBubble);
		L.RegFunction("DrawLabelByOwner", DrawLabelByOwner);
		L.RegFunction("DrawAllianceBadge", DrawAllianceBadge);
		L.RegFunction("DrawHpBar", DrawHpBar);
		L.RegFunction("DrawGovernmentOfficialBadge", DrawGovernmentOfficialBadge);
		L.RegFunction("DrawGuildOfficialBadge", DrawGuildOfficialBadge);
		L.RegFunction("DrawBadge", DrawBadge);
		L.RegFunction("DrawNationalFlag", DrawNationalFlag);
		L.RegFunction("InitializeCountdown", InitializeCountdown);
		L.RegFunction("InitializeDefaultTimer", InitializeDefaultTimer);
		L.RegFunction("ParallelToScreen", ParallelToScreen);
		L.RegFunction("ShowWidget", ShowWidget);
		L.RegFunction("HideWidget", HideWidget);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("faceToCamera", get_faceToCamera, set_faceToCamera);
		L.RegVar("showOnClick", get_showOnClick, set_showOnClick);
		L.RegVar("support_lua_Fortress", get_support_lua_Fortress, set_support_lua_Fortress);
		L.RegVar("support_lua_Government", get_support_lua_Government, set_support_lua_Government);
		L.RegVar("support_lua_Turret", get_support_lua_Turret, set_support_lua_Turret);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(string)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.Initialize(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDType)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDType arg0 = (WorldHUDType)ToLua.ToObject(L, 2);
				obj.Initialize(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.Initialize");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Refresh(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			WorldHUDType arg0 = (WorldHUDType)ToLua.CheckObject(L, 2, typeof(WorldHUDType));
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.Refresh(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitializeHUD(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			WorldHUDType arg0 = (WorldHUDType)ToLua.CheckObject(L, 2, typeof(WorldHUDType));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.InitializeHUD(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RefreshHUD(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			WorldHUDType arg0 = (WorldHUDType)ToLua.CheckObject(L, 2, typeof(WorldHUDType));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.RefreshHUD(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Show(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			obj.Show();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Hide(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			obj.Hide();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Awake(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			obj.Awake();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetWidgetColor(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget), typeof(UnityEngine.Color)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				UnityEngine.Color arg1 = ToLua.ToColor(L, 3);
				obj.SetWidgetColor(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int), typeof(UnityEngine.Color)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.Color arg1 = ToLua.ToColor(L, 3);
				obj.SetWidgetColor(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.SetWidgetColor");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetWidgetIcon(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget), typeof(UnityEngine.Sprite)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				UnityEngine.Sprite arg1 = (UnityEngine.Sprite)ToLua.ToObject(L, 3);
				obj.SetWidgetIcon(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int), typeof(UnityEngine.Sprite)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.Sprite arg1 = (UnityEngine.Sprite)ToLua.ToObject(L, 3);
				obj.SetWidgetIcon(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.SetWidgetIcon");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetWidgetIconType(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget), typeof(int)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.SetWidgetIconType(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int), typeof(int)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.SetWidgetIconType(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int), typeof(uint)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				uint arg1 = (uint)LuaDLL.lua_tonumber(L, 3);
				obj.SetWidgetIconType(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.SetWidgetIconType");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetWidgetX(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget), typeof(float)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				obj.SetWidgetX(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int), typeof(float)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				obj.SetWidgetX(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.SetWidgetX");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetWidgetY(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget), typeof(float)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				obj.SetWidgetY(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int), typeof(float)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				obj.SetWidgetY(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.SetWidgetY");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetWidgetLocalPosition(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int), typeof(UnityEngine.Vector3)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				obj.SetWidgetLocalPosition(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget), typeof(UnityEngine.Vector3)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				obj.SetWidgetLocalPosition(arg0, arg1);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int), typeof(float), typeof(float), typeof(float)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
				obj.SetWidgetLocalPosition(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget), typeof(float), typeof(float), typeof(float)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
				obj.SetWidgetLocalPosition(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.SetWidgetLocalPosition");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetWidgetPercentage(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget), typeof(float)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				obj.SetWidgetPercentage(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int), typeof(float)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				obj.SetWidgetPercentage(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.SetWidgetPercentage");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetWidgetText(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget), typeof(string)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj.SetWidgetText(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int), typeof(uint)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				uint arg1 = (uint)LuaDLL.lua_tonumber(L, 3);
				obj.SetWidgetText(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int), typeof(string)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj.SetWidgetText(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int), typeof(string), typeof(int)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.SetWidgetText(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.SetWidgetText");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetWidgetType(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget), typeof(int)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.SetWidgetType(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int), typeof(int)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.SetWidgetType(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.SetWidgetType");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTimerTimeStamp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.SetTimerTimeStamp(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTimerUpdateFunction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			System.Action<long,uint> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<long,uint>)ToLua.CheckObject(L, 2, typeof(System.Action<long,uint>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<long,uint>), func) as System.Action<long,uint>;
			}

			obj.SetTimerUpdateFunction(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearTimerStamp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			obj.ClearTimerStamp();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetWidgetWidth(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				float o = obj.GetWidgetWidth(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float o = obj.GetWidgetWidth(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.GetWidgetWidth");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PositionToId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			WorldHUDType arg2 = (WorldHUDType)ToLua.CheckObject(L, 3, typeof(WorldHUDType));
			int o = WorldHUDMgr.PositionToId(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IdToPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
			WorldHUDType arg1 = (WorldHUDType)ToLua.CheckObject(L, 2, typeof(WorldHUDType));
			int o = WorldHUDMgr.IdToPosition(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IdToWorldPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.Vector2 o = WorldHUDMgr.IdToWorldPosition(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlayerID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			int o = obj.GetPlayerID();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlayerGuildID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			int o = obj.GetPlayerGuildID();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDataUID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			ulong o = obj.GetDataUID();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDataEntryType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			uint o = obj.GetDataEntryType();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBaseData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			ProtoMsg.SEntryHome o = obj.GetBaseData();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBaseOwnerID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			uint o = obj.GetBaseOwnerID();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBaseLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			uint o = obj.GetBaseLevel();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBaseOfficialID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			uint o = obj.GetBaseOfficialID();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBaseGuildOfficialID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			uint o = obj.GetBaseGuildOfficialID();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBaseGuildTitle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			uint o = obj.GetBaseGuildTitle();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBaseMilitaryRankId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			uint o = obj.GetBaseMilitaryRankId();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBaseGuildID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			uint o = obj.GetBaseGuildID();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBaseName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			string o = obj.GetBaseName();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBaseFortBadge(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			uint o = obj.GetBaseFortBadge();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBaseNationality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			uint o = obj.GetBaseNationality();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasPrisoner(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			bool o = obj.HasPrisoner();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetResourceData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			ProtoMsg.SEntryResource o = obj.GetResourceData();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetResourceLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			uint o = obj.GetResourceLevel();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetResourceOwnerID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			uint o = obj.GetResourceOwnerID();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetOwerGuildData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			ProtoMsg.OwnerGuildInfo o = obj.GetOwerGuildData();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetOwnerGuildBadge(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			uint o = obj.GetOwnerGuildBadge();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetOwnerGuildBanner(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			string o = obj.GetOwnerGuildBanner();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetOwnerGuildID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			uint o = obj.GetOwnerGuildID();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetOwnerGuildName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			string o = obj.GetOwnerGuildName();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEnemyData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			ProtoMsg.SEntryMonster o = obj.GetEnemyData();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEnemyHpPercentage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			float o = obj.GetEnemyHpPercentage();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEnemyLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			uint o = obj.GetEnemyLevel();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRebelArmyTreasureData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			Serclimax.ScPveMonsterData o = obj.GetRebelArmyTreasureData();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRebelArmyTreasureName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			string o = obj.GetRebelArmyTreasureName();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllianceBuildingData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			ProtoMsg.SEntryGuildBuild o = obj.GetAllianceBuildingData();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllianceBuildingID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			uint o = obj.GetAllianceBuildingID();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawDukeBadge(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				obj.DrawDukeBadge(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				obj.DrawDukeBadge(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.DrawDukeBadge");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawRebelArmyFortressBadge(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				obj.DrawRebelArmyFortressBadge(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				obj.DrawRebelArmyFortressBadge(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.DrawRebelArmyFortressBadge");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawBubbleByOwner(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget), typeof(uint), typeof(uint)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				uint arg1 = (uint)LuaDLL.lua_tonumber(L, 3);
				uint arg2 = (uint)LuaDLL.lua_tonumber(L, 4);
				obj.DrawBubbleByOwner(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int), typeof(uint), typeof(uint)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				uint arg1 = (uint)LuaDLL.lua_tonumber(L, 3);
				uint arg2 = (uint)LuaDLL.lua_tonumber(L, 4);
				obj.DrawBubbleByOwner(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.DrawBubbleByOwner");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawMobaBaseBubble(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget), typeof(uint)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				uint arg1 = (uint)LuaDLL.lua_tonumber(L, 3);
				obj.DrawMobaBaseBubble(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int), typeof(uint)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				uint arg1 = (uint)LuaDLL.lua_tonumber(L, 3);
				obj.DrawMobaBaseBubble(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.DrawMobaBaseBubble");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawLabelByOwner(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget), typeof(string), typeof(uint), typeof(uint)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				uint arg2 = (uint)LuaDLL.lua_tonumber(L, 4);
				uint arg3 = (uint)LuaDLL.lua_tonumber(L, 5);
				obj.DrawLabelByOwner(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int), typeof(string), typeof(uint), typeof(uint)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				uint arg2 = (uint)LuaDLL.lua_tonumber(L, 4);
				uint arg3 = (uint)LuaDLL.lua_tonumber(L, 5);
				obj.DrawLabelByOwner(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.DrawLabelByOwner");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawAllianceBadge(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				obj.DrawAllianceBadge(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				obj.DrawAllianceBadge(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget), typeof(uint)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				uint arg1 = (uint)LuaDLL.lua_tonumber(L, 3);
				obj.DrawAllianceBadge(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int), typeof(uint)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				uint arg1 = (uint)LuaDLL.lua_tonumber(L, 3);
				obj.DrawAllianceBadge(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.DrawAllianceBadge");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawHpBar(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				obj.DrawHpBar(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				obj.DrawHpBar(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.DrawHpBar");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawGovernmentOfficialBadge(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget), typeof(uint)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				uint arg1 = (uint)LuaDLL.lua_tonumber(L, 3);
				obj.DrawGovernmentOfficialBadge(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int), typeof(uint)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				uint arg1 = (uint)LuaDLL.lua_tonumber(L, 3);
				obj.DrawGovernmentOfficialBadge(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.DrawGovernmentOfficialBadge");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawGuildOfficialBadge(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget), typeof(uint)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				uint arg1 = (uint)LuaDLL.lua_tonumber(L, 3);
				obj.DrawGuildOfficialBadge(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int), typeof(uint)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				uint arg1 = (uint)LuaDLL.lua_tonumber(L, 3);
				obj.DrawGuildOfficialBadge(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.DrawGuildOfficialBadge");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawBadge(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.CheckUnityObject(L, 2, typeof(WorldHUDWidget));
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			obj.DrawBadge(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawNationalFlag(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget), typeof(uint)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				uint arg1 = (uint)LuaDLL.lua_tonumber(L, 3);
				obj.DrawNationalFlag(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int), typeof(uint)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				uint arg1 = (uint)LuaDLL.lua_tonumber(L, 3);
				obj.DrawNationalFlag(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.DrawNationalFlag");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitializeCountdown(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.InitializeCountdown(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitializeDefaultTimer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.CheckUnityObject(L, 2, typeof(WorldHUDWidget));
			obj.InitializeDefaultTimer(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParallelToScreen(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)ToLua.CheckObject(L, 1, typeof(WorldHUDMgr));
			obj.ParallelToScreen();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowWidget(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				obj.ShowWidget(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				obj.ShowWidget(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.ShowWidget");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideWidget(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(WorldHUDWidget)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				WorldHUDWidget arg0 = (WorldHUDWidget)ToLua.ToObject(L, 2);
				obj.HideWidget(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(WorldHUDMgr), typeof(int)))
			{
				WorldHUDMgr obj = (WorldHUDMgr)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				obj.HideWidget(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WorldHUDMgr.HideWidget");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_faceToCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)o;
			bool ret = obj.faceToCamera;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index faceToCamera on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showOnClick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)o;
			bool ret = obj.showOnClick;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index showOnClick on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_support_lua_Fortress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)o;
			bool ret = obj.support_lua_Fortress;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index support_lua_Fortress on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_support_lua_Government(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)o;
			bool ret = obj.support_lua_Government;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index support_lua_Government on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_support_lua_Turret(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)o;
			bool ret = obj.support_lua_Turret;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index support_lua_Turret on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_faceToCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.faceToCamera = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index faceToCamera on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showOnClick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showOnClick = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index showOnClick on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_support_lua_Fortress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.support_lua_Fortress = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index support_lua_Fortress on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_support_lua_Government(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.support_lua_Government = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index support_lua_Government on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_support_lua_Turret(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldHUDMgr obj = (WorldHUDMgr)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.support_lua_Turret = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index support_lua_Turret on a nil value" : e.Message);
		}
	}
}

