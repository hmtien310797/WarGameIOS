//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Clishow_CsSingletonBehaviour_Clishow_CsBattleWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Clishow.CsSingletonBehaviour<Clishow.CsBattle>), typeof(UnityEngine.MonoBehaviour), "CsSingletonBehaviour_Clishow_CsBattle");
		L.RegFunction("IsGlobal", IsGlobal);
		L.RegFunction("IsAutoInit", IsAutoInit);
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("OnDestroy", OnDestroy);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("isValid", get_isValid, null);
		L.RegVar("Initialized", get_Initialized, null);
		L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsGlobal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Clishow.CsSingletonBehaviour<Clishow.CsBattle> obj = (Clishow.CsSingletonBehaviour<Clishow.CsBattle>)ToLua.CheckObject(L, 1, typeof(Clishow.CsSingletonBehaviour<Clishow.CsBattle>));
			bool o = obj.IsGlobal();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsAutoInit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Clishow.CsSingletonBehaviour<Clishow.CsBattle> obj = (Clishow.CsSingletonBehaviour<Clishow.CsBattle>)ToLua.CheckObject(L, 1, typeof(Clishow.CsSingletonBehaviour<Clishow.CsBattle>));
			bool o = obj.IsAutoInit();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Clishow.CsSingletonBehaviour<Clishow.CsBattle> obj = (Clishow.CsSingletonBehaviour<Clishow.CsBattle>)ToLua.CheckObject(L, 1, typeof(Clishow.CsSingletonBehaviour<Clishow.CsBattle>));
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.Initialize(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Clishow.CsSingletonBehaviour<Clishow.CsBattle> obj = (Clishow.CsSingletonBehaviour<Clishow.CsBattle>)ToLua.CheckObject(L, 1, typeof(Clishow.CsSingletonBehaviour<Clishow.CsBattle>));
			obj.OnDestroy();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isValid(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, Clishow.CsSingletonBehaviour<Clishow.CsBattle>.isValid);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Initialized(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsSingletonBehaviour<Clishow.CsBattle> obj = (Clishow.CsSingletonBehaviour<Clishow.CsBattle>)o;
			bool ret = obj.Initialized;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Initialized on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Clishow.CsSingletonBehaviour<Clishow.CsBattle>.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

