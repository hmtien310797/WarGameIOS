//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ControllerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Controller), typeof(System.Object));
		L.RegFunction("Clear", Clear);
		L.RegFunction("UpdateControl", UpdateControl);
		L.RegFunction("GetTouches", GetTouches);
		L.RegFunction("IsDown", IsDown);
		L.RegFunction("IsPressed", IsPressed);
		L.RegFunction("IsDragged", IsDragged);
		L.RegFunction("IsReleased", IsReleased);
		L.RegFunction("IsClick", IsClick);
		L.RegFunction("IsPinch", IsPinch);
		L.RegFunction("IsShaking", IsShaking);
		L.RegFunction("GetDeltaX", GetDeltaX);
		L.RegFunction("GetDeltaY", GetDeltaY);
		L.RegFunction("GetPinchDelta", GetPinchDelta);
		L.RegFunction("GetDownPosition", GetDownPosition);
		L.RegFunction("GetCurrentPosition", GetCurrentPosition);
		L.RegFunction("GetReleasePosition", GetReleasePosition);
		L.RegFunction("GetHitByCurrentPosition", GetHitByCurrentPosition);
		L.RegFunction("GetHitsByCurrentPosition", GetHitsByCurrentPosition);
		L.RegFunction("GetHitPositionByCurrentPosition", GetHitPositionByCurrentPosition);
		L.RegFunction("New", _CreateController);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("instance", get_instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateController(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Controller obj = new Controller();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Controller.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Controller obj = (Controller)ToLua.CheckObject(L, 1, typeof(Controller));
			obj.Clear();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateControl(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Controller obj = (Controller)ToLua.CheckObject(L, 1, typeof(Controller));
			bool o = obj.UpdateControl();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTouches(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Controller obj = (Controller)ToLua.CheckObject(L, 1, typeof(Controller));
			System.Collections.Generic.Dictionary<int,Controller.MouseOrTouch> o = obj.GetTouches();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsDown(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Controller obj = (Controller)ToLua.CheckObject(L, 1, typeof(Controller));
			bool o = obj.IsDown();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsPressed(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Controller obj = (Controller)ToLua.CheckObject(L, 1, typeof(Controller));
			bool o = obj.IsPressed();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsDragged(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Controller obj = (Controller)ToLua.CheckObject(L, 1, typeof(Controller));
			bool o = obj.IsDragged();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsReleased(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Controller obj = (Controller)ToLua.CheckObject(L, 1, typeof(Controller));
			bool o = obj.IsReleased();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Controller obj = (Controller)ToLua.CheckObject(L, 1, typeof(Controller));
			bool o = obj.IsClick();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsPinch(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Controller obj = (Controller)ToLua.CheckObject(L, 1, typeof(Controller));
			bool o = obj.IsPinch();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsShaking(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Controller obj = (Controller)ToLua.CheckObject(L, 1, typeof(Controller));
			bool o = obj.IsShaking();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDeltaX(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Controller obj = (Controller)ToLua.CheckObject(L, 1, typeof(Controller));
			float o = obj.GetDeltaX();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDeltaY(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Controller obj = (Controller)ToLua.CheckObject(L, 1, typeof(Controller));
			float o = obj.GetDeltaY();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPinchDelta(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Controller obj = (Controller)ToLua.CheckObject(L, 1, typeof(Controller));
			float o = obj.GetPinchDelta();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDownPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Controller obj = (Controller)ToLua.CheckObject(L, 1, typeof(Controller));
			UnityEngine.Vector3 o = obj.GetDownPosition();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurrentPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Controller obj = (Controller)ToLua.CheckObject(L, 1, typeof(Controller));
			UnityEngine.Vector3 o = obj.GetCurrentPosition();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetReleasePosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Controller obj = (Controller)ToLua.CheckObject(L, 1, typeof(Controller));
			UnityEngine.Vector3 o = obj.GetReleasePosition();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHitByCurrentPosition(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Controller), typeof(int)))
			{
				Controller obj = (Controller)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				System.Nullable<UnityEngine.RaycastHit> o = obj.GetHitByCurrentPosition(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(Controller), typeof(UnityEngine.Camera), typeof(int)))
			{
				Controller obj = (Controller)ToLua.ToObject(L, 1);
				UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.ToObject(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				System.Nullable<UnityEngine.RaycastHit> o = obj.GetHitByCurrentPosition(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Controller.GetHitByCurrentPosition");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHitsByCurrentPosition(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Controller), typeof(int)))
			{
				Controller obj = (Controller)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.RaycastHit[] o = obj.GetHitsByCurrentPosition(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(Controller), typeof(UnityEngine.Camera), typeof(int)))
			{
				Controller obj = (Controller)ToLua.ToObject(L, 1);
				UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.ToObject(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				UnityEngine.RaycastHit[] o = obj.GetHitsByCurrentPosition(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Controller.GetHitsByCurrentPosition");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHitPositionByCurrentPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Controller obj = (Controller)ToLua.CheckObject(L, 1, typeof(Controller));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Vector3 o = obj.GetHitPositionByCurrentPosition(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, Controller.instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

