//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameSetting_OptionDataWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameSetting.OptionData), typeof(System.Object));
		L.RegFunction("New", _CreateGameSetting_OptionData);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("mExeVersion", get_mExeVersion, set_mExeVersion);
		L.RegVar("mResVersion", get_mResVersion, set_mResVersion);
		L.RegVar("mGameSpeedLevel", get_mGameSpeedLevel, set_mGameSpeedLevel);
		L.RegVar("mSoundSetting", get_mSoundSetting, set_mSoundSetting);
		L.RegVar("mMusicSetting", get_mMusicSetting, set_mMusicSetting);
		L.RegVar("mQualityLevel", get_mQualityLevel, set_mQualityLevel);
		L.RegVar("mLanguage", get_mLanguage, set_mLanguage);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameSetting_OptionData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GameSetting.OptionData obj = new GameSetting.OptionData();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameSetting.OptionData.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mExeVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameSetting.OptionData obj = (GameSetting.OptionData)o;
			string ret = obj.mExeVersion;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mExeVersion on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mResVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameSetting.OptionData obj = (GameSetting.OptionData)o;
			string ret = obj.mResVersion;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mResVersion on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mGameSpeedLevel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameSetting.OptionData obj = (GameSetting.OptionData)o;
			int ret = obj.mGameSpeedLevel;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mGameSpeedLevel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mSoundSetting(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameSetting.OptionData obj = (GameSetting.OptionData)o;
			bool ret = obj.mSoundSetting;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mSoundSetting on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mMusicSetting(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameSetting.OptionData obj = (GameSetting.OptionData)o;
			bool ret = obj.mMusicSetting;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mMusicSetting on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mQualityLevel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameSetting.OptionData obj = (GameSetting.OptionData)o;
			int ret = obj.mQualityLevel;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mQualityLevel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mLanguage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameSetting.OptionData obj = (GameSetting.OptionData)o;
			string ret = obj.mLanguage;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mLanguage on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mExeVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameSetting.OptionData obj = (GameSetting.OptionData)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.mExeVersion = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mExeVersion on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mResVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameSetting.OptionData obj = (GameSetting.OptionData)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.mResVersion = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mResVersion on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mGameSpeedLevel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameSetting.OptionData obj = (GameSetting.OptionData)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.mGameSpeedLevel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mGameSpeedLevel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mSoundSetting(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameSetting.OptionData obj = (GameSetting.OptionData)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.mSoundSetting = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mSoundSetting on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mMusicSetting(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameSetting.OptionData obj = (GameSetting.OptionData)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.mMusicSetting = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mMusicSetting on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mQualityLevel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameSetting.OptionData obj = (GameSetting.OptionData)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.mQualityLevel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mQualityLevel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mLanguage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameSetting.OptionData obj = (GameSetting.OptionData)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.mLanguage = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mLanguage on a nil value" : e.Message);
		}
	}
}

