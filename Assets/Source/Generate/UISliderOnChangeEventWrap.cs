//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UISliderOnChangeEventWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UISliderOnChangeEvent), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("OnSliderChange", OnSliderChange);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("OnChange", get_OnChange, set_OnChange);
		L.RegFunction("FloatDelegate", UISliderOnChangeEvent_FloatDelegate);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSliderChange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UISliderOnChangeEvent obj = (UISliderOnChangeEvent)ToLua.CheckObject(L, 1, typeof(UISliderOnChangeEvent));
			obj.OnSliderChange();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnChange(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UISliderOnChangeEvent obj = (UISliderOnChangeEvent)o;
			UISliderOnChangeEvent.FloatDelegate ret = obj.OnChange;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnChange on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnChange(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UISliderOnChangeEvent obj = (UISliderOnChangeEvent)o;
			UISliderOnChangeEvent.FloatDelegate arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (UISliderOnChangeEvent.FloatDelegate)ToLua.CheckObject(L, 2, typeof(UISliderOnChangeEvent.FloatDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(UISliderOnChangeEvent.FloatDelegate), func) as UISliderOnChangeEvent.FloatDelegate;
			}

			obj.OnChange = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnChange on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UISliderOnChangeEvent_FloatDelegate(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UISliderOnChangeEvent.FloatDelegate), func);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

