//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIButtonColor_StateWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(UIButtonColor.State));
		L.RegVar("Normal", get_Normal, null);
		L.RegVar("Hover", get_Hover, null);
		L.RegVar("Pressed", get_Pressed, null);
		L.RegVar("Disabled", get_Disabled, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Normal(IntPtr L)
	{
		ToLua.Push(L, UIButtonColor.State.Normal);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Hover(IntPtr L)
	{
		ToLua.Push(L, UIButtonColor.State.Hover);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Pressed(IntPtr L)
	{
		ToLua.Push(L, UIButtonColor.State.Pressed);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Disabled(IntPtr L)
	{
		ToLua.Push(L, UIButtonColor.State.Disabled);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		UIButtonColor.State o = (UIButtonColor.State)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

