//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AssetBundleManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AssetBundleManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("ClearDelegate", ClearDelegate);
		L.RegFunction("DeleteAllAssetBundles", DeleteAllAssetBundles);
		L.RegFunction("SetVersion", SetVersion);
		L.RegFunction("CheckAssets", CheckAssets);
		L.RegFunction("GetNeedLoadSize", GetNeedLoadSize);
		L.RegFunction("StopDownLoad", StopDownLoad);
		L.RegFunction("GetTotalSize", GetTotalSize);
		L.RegFunction("DownLoadRemote", DownLoadRemote);
		L.RegFunction("CheckRemote", CheckRemote);
		L.RegFunction("LoadAssetBundle", LoadAssetBundle);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("releaseTime", get_releaseTime, set_releaseTime);
		L.RegVar("needReload", get_needReload, set_needReload);
		L.RegVar("ischecking", get_ischecking, set_ischecking);
		L.RegVar("Instance", get_Instance, null);
		L.RegVar("isChecking", get_isChecking, set_isChecking);
		L.RegVar("onCheckPercent", get_onCheckPercent, set_onCheckPercent);
		L.RegVar("onBundleLoad", get_onBundleLoad, set_onBundleLoad);
		L.RegVar("isNeedRecheck", get_isNeedRecheck, set_isNeedRecheck);
		L.RegFunction("StringCallback", AssetBundleManager_StringCallback);
		L.RegFunction("BoolCallback", AssetBundleManager_BoolCallback);
		L.RegFunction("FloatCallback", AssetBundleManager_FloatCallback);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearDelegate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AssetBundleManager obj = (AssetBundleManager)ToLua.CheckObject(L, 1, typeof(AssetBundleManager));
			obj.ClearDelegate();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeleteAllAssetBundles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AssetBundleManager obj = (AssetBundleManager)ToLua.CheckObject(L, 1, typeof(AssetBundleManager));
			obj.DeleteAllAssetBundles();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AssetBundleManager obj = (AssetBundleManager)ToLua.CheckObject(L, 1, typeof(AssetBundleManager));
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetVersion(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckAssets(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(AssetBundleManager)))
			{
				AssetBundleManager obj = (AssetBundleManager)ToLua.ToObject(L, 1);
				obj.CheckAssets();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(AssetBundleManager), typeof(string)))
			{
				AssetBundleManager obj = (AssetBundleManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.CheckAssets(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AssetBundleManager.CheckAssets");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNeedLoadSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AssetBundleManager obj = (AssetBundleManager)ToLua.CheckObject(L, 1, typeof(AssetBundleManager));
			string o = obj.GetNeedLoadSize();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopDownLoad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AssetBundleManager obj = (AssetBundleManager)ToLua.CheckObject(L, 1, typeof(AssetBundleManager));
			obj.StopDownLoad();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTotalSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AssetBundleManager obj = (AssetBundleManager)ToLua.CheckObject(L, 1, typeof(AssetBundleManager));
			string o = obj.GetTotalSize();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DownLoadRemote(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AssetBundleManager obj = (AssetBundleManager)ToLua.CheckObject(L, 1, typeof(AssetBundleManager));
			obj.DownLoadRemote();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckRemote(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AssetBundleManager obj = (AssetBundleManager)ToLua.CheckObject(L, 1, typeof(AssetBundleManager));
			obj.CheckRemote();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAssetBundle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			AssetBundleManager obj = (AssetBundleManager)ToLua.CheckObject(L, 1, typeof(AssetBundleManager));
			string arg0 = ToLua.CheckString(L, 2);
			AssetBundleManager.StringCallback arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (AssetBundleManager.StringCallback)ToLua.CheckObject(L, 3, typeof(AssetBundleManager.StringCallback));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(AssetBundleManager.StringCallback), func) as AssetBundleManager.StringCallback;
			}

			UnityEngine.AssetBundle o = obj.LoadAssetBundle(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_releaseTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AssetBundleManager obj = (AssetBundleManager)o;
			float ret = obj.releaseTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index releaseTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_needReload(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AssetBundleManager obj = (AssetBundleManager)o;
			bool ret = obj.needReload;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index needReload on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ischecking(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AssetBundleManager obj = (AssetBundleManager)o;
			bool ret = obj.ischecking;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ischecking on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, AssetBundleManager.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isChecking(IntPtr L)
	{
		ToLua.Push(L, new EventObject("AssetBundleManager.isChecking"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onCheckPercent(IntPtr L)
	{
		ToLua.Push(L, new EventObject("AssetBundleManager.onCheckPercent"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onBundleLoad(IntPtr L)
	{
		ToLua.Push(L, new EventObject("AssetBundleManager.onBundleLoad"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isNeedRecheck(IntPtr L)
	{
		ToLua.Push(L, new EventObject("AssetBundleManager.isNeedRecheck"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_releaseTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AssetBundleManager obj = (AssetBundleManager)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.releaseTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index releaseTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_needReload(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AssetBundleManager obj = (AssetBundleManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.needReload = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index needReload on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ischecking(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AssetBundleManager obj = (AssetBundleManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ischecking = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ischecking on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isChecking(IntPtr L)
	{
		try
		{
			AssetBundleManager obj = (AssetBundleManager)ToLua.CheckObject(L, 1, typeof(AssetBundleManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'AssetBundleManager.isChecking' can only appear on the left hand side of += or -= when used outside of the type 'AssetBundleManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				AssetBundleManager.BoolCallback ev = (AssetBundleManager.BoolCallback)DelegateFactory.CreateDelegate(typeof(AssetBundleManager.BoolCallback), arg0.func);
				obj.isChecking += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				AssetBundleManager.BoolCallback ev = (AssetBundleManager.BoolCallback)LuaMisc.GetEventHandler(obj, typeof(AssetBundleManager), "isChecking");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (AssetBundleManager.BoolCallback)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.isChecking -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onCheckPercent(IntPtr L)
	{
		try
		{
			AssetBundleManager obj = (AssetBundleManager)ToLua.CheckObject(L, 1, typeof(AssetBundleManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'AssetBundleManager.onCheckPercent' can only appear on the left hand side of += or -= when used outside of the type 'AssetBundleManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				AssetBundleManager.FloatCallback ev = (AssetBundleManager.FloatCallback)DelegateFactory.CreateDelegate(typeof(AssetBundleManager.FloatCallback), arg0.func);
				obj.onCheckPercent += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				AssetBundleManager.FloatCallback ev = (AssetBundleManager.FloatCallback)LuaMisc.GetEventHandler(obj, typeof(AssetBundleManager), "onCheckPercent");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (AssetBundleManager.FloatCallback)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.onCheckPercent -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onBundleLoad(IntPtr L)
	{
		try
		{
			AssetBundleManager obj = (AssetBundleManager)ToLua.CheckObject(L, 1, typeof(AssetBundleManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'AssetBundleManager.onBundleLoad' can only appear on the left hand side of += or -= when used outside of the type 'AssetBundleManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				AssetBundleManager.StringCallback ev = (AssetBundleManager.StringCallback)DelegateFactory.CreateDelegate(typeof(AssetBundleManager.StringCallback), arg0.func);
				obj.onBundleLoad += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				AssetBundleManager.StringCallback ev = (AssetBundleManager.StringCallback)LuaMisc.GetEventHandler(obj, typeof(AssetBundleManager), "onBundleLoad");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (AssetBundleManager.StringCallback)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.onBundleLoad -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isNeedRecheck(IntPtr L)
	{
		try
		{
			AssetBundleManager obj = (AssetBundleManager)ToLua.CheckObject(L, 1, typeof(AssetBundleManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'AssetBundleManager.isNeedRecheck' can only appear on the left hand side of += or -= when used outside of the type 'AssetBundleManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				AssetBundleManager.BoolCallback ev = (AssetBundleManager.BoolCallback)DelegateFactory.CreateDelegate(typeof(AssetBundleManager.BoolCallback), arg0.func);
				obj.isNeedRecheck += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				AssetBundleManager.BoolCallback ev = (AssetBundleManager.BoolCallback)LuaMisc.GetEventHandler(obj, typeof(AssetBundleManager), "isNeedRecheck");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (AssetBundleManager.BoolCallback)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.isNeedRecheck -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AssetBundleManager_StringCallback(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			Delegate arg1 = DelegateFactory.CreateDelegate(typeof(AssetBundleManager.StringCallback), func);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AssetBundleManager_BoolCallback(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			Delegate arg1 = DelegateFactory.CreateDelegate(typeof(AssetBundleManager.BoolCallback), func);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AssetBundleManager_FloatCallback(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			Delegate arg1 = DelegateFactory.CreateDelegate(typeof(AssetBundleManager.FloatCallback), func);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

