//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Serclimax_SLGPVP_ScSLGPvPWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Serclimax.SLGPVP.ScSLGPvP), typeof(System.Object));
		L.RegFunction("PrintLog", PrintLog);
		L.RegFunction("GetAttackChance", GetAttackChance);
		L.RegFunction("GeneratePhalanx", GeneratePhalanx);
		L.RegFunction("Round", Round);
		L.RegFunction("CheckRoundEnd", CheckRoundEnd);
		L.RegFunction("GetResultRevertPer", GetResultRevertPer);
		L.RegFunction("Account", Account);
		L.RegFunction("PrintCamps", PrintCamps);
		L.RegFunction("PrintHero", PrintHero);
		L.RegFunction("StartBattle", StartBattle);
		L.RegFunction("New", _CreateSerclimax_SLGPVP_ScSLGPvP);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("PhalanxDisplayBase", get_PhalanxDisplayBase, set_PhalanxDisplayBase);
		L.RegVar("ExtralAttack", get_ExtralAttack, set_ExtralAttack);
		L.RegVar("ExtralAttackForce", get_ExtralAttackForce, set_ExtralAttackForce);
		L.RegVar("AssistForce", get_AssistForce, set_AssistForce);
		L.RegVar("RestraintForce", get_RestraintForce, set_RestraintForce);
		L.RegVar("WeakForce", get_WeakForce, set_WeakForce);
		L.RegVar("DefenseForce", get_DefenseForce, set_DefenseForce);
		L.RegVar("CriticalChance", get_CriticalChance, set_CriticalChance);
		L.RegVar("CriticalFactor", get_CriticalFactor, set_CriticalFactor);
		L.RegVar("BlockChance", get_BlockChance, set_BlockChance);
		L.RegVar("BlockFactor", get_BlockFactor, set_BlockFactor);
		L.RegVar("AttackModeHpBonuses", get_AttackModeHpBonuses, set_AttackModeHpBonuses);
		L.RegVar("DefenseModeHpBonuses", get_DefenseModeHpBonuses, set_DefenseModeHpBonuses);
		L.RegVar("WinLoseRoundCount", get_WinLoseRoundCount, set_WinLoseRoundCount);
		L.RegVar("WinRevertPercent", get_WinRevertPercent, set_WinRevertPercent);
		L.RegVar("LoseRevertPercent", get_LoseRevertPercent, set_LoseRevertPercent);
		L.RegVar("RestraintRelations", get_RestraintRelations, set_RestraintRelations);
		L.RegVar("MagicHurtFactor6", get_MagicHurtFactor6, set_MagicHurtFactor6);
		L.RegVar("MagicHurtFactor14", get_MagicHurtFactor14, set_MagicHurtFactor14);
		L.RegVar("ADeadRate", get_ADeadRate, set_ADeadRate);
		L.RegVar("DDeadRate", get_DDeadRate, set_DDeadRate);
		L.RegVar("BattleType", get_BattleType, set_BattleType);
		L.RegVar("IndjuredConfigRate", get_IndjuredConfigRate, set_IndjuredConfigRate);
		L.RegVar("IndDeadConfigRate", get_IndDeadConfigRate, set_IndDeadConfigRate);
		L.RegVar("SkillDataMap", get_SkillDataMap, set_SkillDataMap);
		L.RegVar("Log", get_Log, null);
		L.RegVar("AttackRound", get_AttackRound, null);
		L.RegFunction("OnRoundStartCallBack", Serclimax_SLGPVP_ScSLGPvP_OnRoundStartCallBack);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSerclimax_SLGPVP_ScSLGPvP(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Serclimax.SLGPVP.ScSLGPvP obj = new Serclimax.SLGPVP.ScSLGPvP();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Serclimax.SLGPVP.ScSLGPvP.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PrintLog(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Serclimax.SLGPVP.ScSLGPvP obj = (Serclimax.SLGPVP.ScSLGPvP)ToLua.CheckObject(L, 1, typeof(Serclimax.SLGPVP.ScSLGPvP));
			obj.PrintLog();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAttackChance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Serclimax.ScRandom arg0 = (Serclimax.ScRandom)ToLua.CheckObject(L, 1, typeof(Serclimax.ScRandom));
			float o = Serclimax.SLGPVP.ScSLGPvP.GetAttackChance(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GeneratePhalanx(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Serclimax.SLGPVP.ScSLGPvP obj = (Serclimax.SLGPVP.ScSLGPvP)ToLua.CheckObject(L, 1, typeof(Serclimax.SLGPVP.ScSLGPvP));
			Serclimax.SLGPVP.ScSLGPlayer[] arg0 = ToLua.CheckObjectArray<Serclimax.SLGPVP.ScSLGPlayer>(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			Serclimax.SLGPVP.ScSLGCamp[] o = obj.GeneratePhalanx(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Round(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 8);
			Serclimax.SLGPVP.ScSLGPvP obj = (Serclimax.SLGPVP.ScSLGPvP)ToLua.CheckObject(L, 1, typeof(Serclimax.SLGPVP.ScSLGPvP));
			Serclimax.SLGPVP.ScSLGCamp arg0 = (Serclimax.SLGPVP.ScSLGCamp)ToLua.CheckObject(L, 2, typeof(Serclimax.SLGPVP.ScSLGCamp));
			Serclimax.SLGPVP.ScSLGCamp arg1 = (Serclimax.SLGPVP.ScSLGCamp)ToLua.CheckObject(L, 3, typeof(Serclimax.SLGPVP.ScSLGCamp));
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			Serclimax.ScRandom arg3 = (Serclimax.ScRandom)ToLua.CheckObject(L, 5, typeof(Serclimax.ScRandom));
			bool arg4 = LuaDLL.luaL_checkboolean(L, 6);
			Serclimax.SLGPVP.ScSLGPvP.OnRoundStartCallBack arg5 = null;
			LuaTypes funcType7 = LuaDLL.lua_type(L, 7);

			if (funcType7 != LuaTypes.LUA_TFUNCTION)
			{
				 arg5 = (Serclimax.SLGPVP.ScSLGPvP.OnRoundStartCallBack)ToLua.CheckObject(L, 7, typeof(Serclimax.SLGPVP.ScSLGPvP.OnRoundStartCallBack));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 7);
				arg5 = DelegateFactory.CreateDelegate(typeof(Serclimax.SLGPVP.ScSLGPvP.OnRoundStartCallBack), func) as Serclimax.SLGPVP.ScSLGPvP.OnRoundStartCallBack;
			}

			Serclimax.SLGPVP.ScSLGCamp.OnAttackCallBack arg6 = null;
			LuaTypes funcType8 = LuaDLL.lua_type(L, 8);

			if (funcType8 != LuaTypes.LUA_TFUNCTION)
			{
				 arg6 = (Serclimax.SLGPVP.ScSLGCamp.OnAttackCallBack)ToLua.CheckObject(L, 8, typeof(Serclimax.SLGPVP.ScSLGCamp.OnAttackCallBack));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 8);
				arg6 = DelegateFactory.CreateDelegate(typeof(Serclimax.SLGPVP.ScSLGCamp.OnAttackCallBack), func) as Serclimax.SLGPVP.ScSLGCamp.OnAttackCallBack;
			}

			string o = obj.Round(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckRoundEnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Serclimax.SLGPVP.ScSLGPvP obj = (Serclimax.SLGPVP.ScSLGPvP)ToLua.CheckObject(L, 1, typeof(Serclimax.SLGPVP.ScSLGPvP));
			Serclimax.SLGPVP.ScSLGCamp[] arg0 = ToLua.CheckObjectArray<Serclimax.SLGPVP.ScSLGCamp>(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			bool o = obj.CheckRoundEnd(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetResultRevertPer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Serclimax.SLGPVP.ScSLGPvP obj = (Serclimax.SLGPVP.ScSLGPvP)ToLua.CheckObject(L, 1, typeof(Serclimax.SLGPVP.ScSLGPvP));
			Serclimax.SLGPVP.ScSLGCamp arg0 = (Serclimax.SLGPVP.ScSLGCamp)ToLua.CheckObject(L, 2, typeof(Serclimax.SLGPVP.ScSLGCamp));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			float o = obj.GetResultRevertPer(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Account(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Serclimax.SLGPVP.ScSLGPvP obj = (Serclimax.SLGPVP.ScSLGPvP)ToLua.CheckObject(L, 1, typeof(Serclimax.SLGPVP.ScSLGPvP));
			Serclimax.SLGPVP.ScSLGCamp[] arg0 = ToLua.CheckObjectArray<Serclimax.SLGPVP.ScSLGCamp>(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			obj.Account(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PrintCamps(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Serclimax.SLGPVP.ScSLGPvP obj = (Serclimax.SLGPVP.ScSLGPvP)ToLua.CheckObject(L, 1, typeof(Serclimax.SLGPVP.ScSLGPvP));
			Serclimax.SLGPVP.ScSLGCamp arg0 = (Serclimax.SLGPVP.ScSLGCamp)ToLua.CheckObject(L, 2, typeof(Serclimax.SLGPVP.ScSLGCamp));
			string o = obj.PrintCamps(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PrintHero(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Serclimax.SLGPVP.ScSLGPvP obj = (Serclimax.SLGPVP.ScSLGPvP)ToLua.CheckObject(L, 1, typeof(Serclimax.SLGPVP.ScSLGPvP));
			Serclimax.SLGPVP.ScSLGPlayer[] arg0 = ToLua.CheckObjectArray<Serclimax.SLGPVP.ScSLGPlayer>(L, 2);
			string o = obj.PrintHero(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartBattle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			Serclimax.SLGPVP.ScSLGPvP obj = (Serclimax.SLGPVP.ScSLGPvP)ToLua.CheckObject(L, 1, typeof(Serclimax.SLGPVP.ScSLGPvP));
			Serclimax.SLGPVP.ScSLGPlayer[] arg0 = ToLua.CheckObjectArray<Serclimax.SLGPVP.ScSLGPlayer>(L, 2);
			uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
			string arg3 = ToLua.CheckString(L, 5);
			string arg4 = ToLua.CheckString(L, 6);
			string arg5 = ToLua.CheckString(L, 7);
			Serclimax.SLGPVP.ScSLGCamp[] o = obj.StartBattle(arg0, arg1, arg2, arg3, arg4, arg5);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PhalanxDisplayBase(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Serclimax.SLGPVP.ScSLGPvP.PhalanxDisplayBase);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ExtralAttack(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.SLGPVP.ScSLGPvP.ExtralAttack);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ExtralAttackForce(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.SLGPVP.ScSLGPvP.ExtralAttackForce);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssistForce(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.SLGPVP.ScSLGPvP.AssistForce);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RestraintForce(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.SLGPVP.ScSLGPvP.RestraintForce);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WeakForce(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.SLGPVP.ScSLGPvP.WeakForce);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DefenseForce(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.SLGPVP.ScSLGPvP.DefenseForce);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CriticalChance(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.SLGPVP.ScSLGPvP.CriticalChance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CriticalFactor(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.SLGPVP.ScSLGPvP.CriticalFactor);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BlockChance(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.SLGPVP.ScSLGPvP.BlockChance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BlockFactor(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.SLGPVP.ScSLGPvP.BlockFactor);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AttackModeHpBonuses(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Serclimax.SLGPVP.ScSLGPvP.AttackModeHpBonuses);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DefenseModeHpBonuses(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Serclimax.SLGPVP.ScSLGPvP.DefenseModeHpBonuses);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WinLoseRoundCount(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Serclimax.SLGPVP.ScSLGPvP.WinLoseRoundCount);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WinRevertPercent(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Serclimax.SLGPVP.ScSLGPvP.WinRevertPercent);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoseRevertPercent(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Serclimax.SLGPVP.ScSLGPvP.LoseRevertPercent);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RestraintRelations(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Serclimax.SLGPVP.ScSLGPvP.RestraintRelations);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MagicHurtFactor6(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.SLGPVP.ScSLGPvP.MagicHurtFactor6);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MagicHurtFactor14(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.SLGPVP.ScSLGPvP.MagicHurtFactor14);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ADeadRate(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.SLGPVP.ScSLGPvP.ADeadRate);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DDeadRate(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.SLGPVP.ScSLGPvP.DDeadRate);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BattleType(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Serclimax.SLGPVP.ScSLGPvP.BattleType);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IndjuredConfigRate(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.SLGPVP.ScSLGPvP.IndjuredConfigRate);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IndDeadConfigRate(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.SLGPVP.ScSLGPvP.IndDeadConfigRate);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SkillDataMap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Serclimax.SLGPVP.ScSLGPvP obj = (Serclimax.SLGPVP.ScSLGPvP)o;
			System.Collections.Generic.Dictionary<int,Serclimax.SLGPVP.ScSLGSkillData> ret = obj.SkillDataMap;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SkillDataMap on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Log(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Serclimax.SLGPVP.ScSLGPvP obj = (Serclimax.SLGPVP.ScSLGPvP)o;
			string ret = obj.Log;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Log on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AttackRound(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Serclimax.SLGPVP.ScSLGPvP obj = (Serclimax.SLGPVP.ScSLGPvP)o;
			int ret = obj.AttackRound;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AttackRound on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PhalanxDisplayBase(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.PhalanxDisplayBase = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ExtralAttack(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.ExtralAttack = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ExtralAttackForce(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.ExtralAttackForce = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AssistForce(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.AssistForce = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RestraintForce(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.RestraintForce = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WeakForce(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.WeakForce = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DefenseForce(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.DefenseForce = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CriticalChance(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.CriticalChance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CriticalFactor(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.CriticalFactor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BlockChance(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.BlockChance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BlockFactor(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.BlockFactor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AttackModeHpBonuses(IntPtr L)
	{
		try
		{
			float[] arg0 = ToLua.CheckNumberArray<float>(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.AttackModeHpBonuses = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DefenseModeHpBonuses(IntPtr L)
	{
		try
		{
			float[] arg0 = ToLua.CheckNumberArray<float>(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.DefenseModeHpBonuses = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WinLoseRoundCount(IntPtr L)
	{
		try
		{
			int[] arg0 = ToLua.CheckNumberArray<int>(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.WinLoseRoundCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WinRevertPercent(IntPtr L)
	{
		try
		{
			float[] arg0 = ToLua.CheckNumberArray<float>(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.WinRevertPercent = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LoseRevertPercent(IntPtr L)
	{
		try
		{
			float[] arg0 = ToLua.CheckNumberArray<float>(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.LoseRevertPercent = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RestraintRelations(IntPtr L)
	{
		try
		{
			int[][] arg0 = ToLua.CheckObjectArray<int[]>(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.RestraintRelations = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MagicHurtFactor6(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.MagicHurtFactor6 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MagicHurtFactor14(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.MagicHurtFactor14 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ADeadRate(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.ADeadRate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DDeadRate(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.DDeadRate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BattleType(IntPtr L)
	{
		try
		{
			ProtoMsg.SceneBattleType arg0 = (ProtoMsg.SceneBattleType)ToLua.CheckObject(L, 2, typeof(ProtoMsg.SceneBattleType));
			Serclimax.SLGPVP.ScSLGPvP.BattleType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IndjuredConfigRate(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.IndjuredConfigRate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IndDeadConfigRate(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			Serclimax.SLGPVP.ScSLGPvP.IndDeadConfigRate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SkillDataMap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Serclimax.SLGPVP.ScSLGPvP obj = (Serclimax.SLGPVP.ScSLGPvP)o;
			System.Collections.Generic.Dictionary<int,Serclimax.SLGPVP.ScSLGSkillData> arg0 = (System.Collections.Generic.Dictionary<int,Serclimax.SLGPVP.ScSLGSkillData>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,Serclimax.SLGPVP.ScSLGSkillData>));
			obj.SkillDataMap = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SkillDataMap on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Serclimax_SLGPVP_ScSLGPvP_OnRoundStartCallBack(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			Delegate arg1 = DelegateFactory.CreateDelegate(typeof(Serclimax.SLGPVP.ScSLGPvP.OnRoundStartCallBack), func);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

