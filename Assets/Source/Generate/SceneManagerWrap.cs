//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SceneManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SceneManager), typeof(System.Object));
		L.RegFunction("GetFireline", GetFireline);
		L.RegFunction("MoveFirelineTo", MoveFirelineTo);
		L.RegFunction("ClearLevel", ClearLevel);
		L.RegFunction("InitScRoots", InitScRoots);
		L.RegFunction("LoadLevel", LoadLevel);
		L.RegFunction("LoadLevelData", LoadLevelData);
		L.RegFunction("LoadAStarData", LoadAStarData);
		L.RegFunction("LoadEventsData", LoadEventsData);
		L.RegFunction("preloadUnit", preloadUnit);
		L.RegFunction("LoadEffectAsset", LoadEffectAsset);
		L.RegFunction("LoadAndPlayBgMusic", LoadAndPlayBgMusic);
		L.RegFunction("Update", Update);
		L.RegFunction("CanCreateUnit", CanCreateUnit);
		L.RegFunction("HasValidUnitPos", HasValidUnitPos);
		L.RegFunction("GetValidUnitPos", GetValidUnitPos);
		L.RegFunction("SetTeamCoef", SetTeamCoef);
		L.RegFunction("CreateUnit2RedCmd", CreateUnit2RedCmd);
		L.RegFunction("CreateUnit4RedCmd", CreateUnit4RedCmd);
		L.RegFunction("CreateUnit", CreateUnit);
		L.RegFunction("PointIsWalkable", PointIsWalkable);
		L.RegFunction("DisposeLevelGlobelMsg", DisposeLevelGlobelMsg);
		L.RegFunction("DisposeActiveGuideMsg", DisposeActiveGuideMsg);
		L.RegFunction("DisposeActiveLevelHintMsg", DisposeActiveLevelHintMsg);
		L.RegFunction("DisposeProductionStartMsg", DisposeProductionStartMsg);
		L.RegFunction("DisposeRagionUpdateMsg", DisposeRagionUpdateMsg);
		L.RegFunction("DisposeScreenLockMsg", DisposeScreenLockMsg);
		L.RegFunction("OnLoadFinished", OnLoadFinished);
		L.RegFunction("DebugTest", DebugTest);
		L.RegFunction("TouchTest", TouchTest);
		L.RegFunction("GCManual", GCManual);
		L.RegFunction("AddUnlockMaxAmryID", AddUnlockMaxAmryID);
		L.RegFunction("GetMaskObjs", GetMaskObjs);
		L.RegFunction("RequestEscapeBattle", RequestEscapeBattle);
		L.RegFunction("New", _CreateSceneManager);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("GameOverMinTimeScale", get_GameOverMinTimeScale, null);
		L.RegVar("GameOverAnimTotalTime", get_GameOverAnimTotalTime, null);
		L.RegVar("gScTableData", get_gScTableData, set_gScTableData);
		L.RegVar("gScRoots", get_gScRoots, set_gScRoots);
		L.RegVar("onSceneLoadFinished", get_onSceneLoadFinished, set_onSceneLoadFinished);
		L.RegVar("onGameOver", get_onGameOver, set_onGameOver);
		L.RegVar("isScreenLock", get_isScreenLock, set_isScreenLock);
		L.RegVar("Entity", get_Entity, set_Entity);
		L.RegVar("GroupObj", get_GroupObj, null);
		L.RegVar("instance", get_instance, null);
		L.RegVar("CurLevelData", get_CurLevelData, set_CurLevelData);
		L.RegVar("LevelRoot", get_LevelRoot, null);
		L.RegVar("Astar", get_Astar, set_Astar);
		L.RegVar("CurChapterName", get_CurChapterName, set_CurChapterName);
		L.RegVar("CurLevelName", get_CurLevelName, set_CurLevelName);
		L.RegVar("GameWin", get_GameWin, set_GameWin);
		L.RegVar("gameOverState", get_gameOverState, null);
		L.RegFunction("CallbackFunc", SceneManager_CallbackFunc);
		L.RegFunction("OnGameOver", SceneManager_OnGameOver);
		L.RegFunction("OnSceneLoadFinished", SceneManager_OnSceneLoadFinished);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSceneManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				SceneManager obj = new SceneManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: SceneManager.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFireline(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			UnityEngine.GameObject o = obj.GetFireline();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveFirelineTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.MoveFirelineTo(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			obj.ClearLevel();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitScRoots(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			int[] arg0 = ToLua.CheckNumberArray<int>(L, 2);
			System.Action arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action)ToLua.CheckObject(L, 3, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			obj.InitScRoots(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			bool o = obj.LoadLevel();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadLevelData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			bool o = obj.LoadLevelData(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAStarData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			bool o = obj.LoadAStarData();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadEventsData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			bool o = obj.LoadEventsData();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int preloadUnit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			System.Collections.Generic.List<int> arg0 = (System.Collections.Generic.List<int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<int>));
			bool o = obj.preloadUnit(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadEffectAsset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			bool o = obj.LoadEffectAsset();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAndPlayBgMusic(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool o = obj.LoadAndPlayBgMusic(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Update(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanCreateUnit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
			bool o = obj.CanCreateUnit(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasValidUnitPos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
			bool o = obj.HasValidUnitPos(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetValidUnitPos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
			System.Collections.Generic.List<UnityEngine.Vector3> o = obj.GetValidUnitPos(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTeamCoef(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Serclimax.Unit.ScUnitDefenseCoef arg1 = (Serclimax.Unit.ScUnitDefenseCoef)ToLua.CheckObject(L, 3, typeof(Serclimax.Unit.ScUnitDefenseCoef));
			obj.SetTeamCoef(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateUnit2RedCmd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 4);
			Serclimax.Unit.ScUnitBonus arg3 = (Serclimax.Unit.ScUnitBonus)ToLua.CheckObject(L, 5, typeof(Serclimax.Unit.ScUnitBonus));
			string o = obj.CreateUnit2RedCmd(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateUnit4RedCmd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			string arg0 = ToLua.CheckString(L, 2);
			obj.CreateUnit4RedCmd(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateUnit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 4);
			Serclimax.Unit.ScUnitBonus arg3 = (Serclimax.Unit.ScUnitBonus)ToLua.CheckObject(L, 5, typeof(Serclimax.Unit.ScUnitBonus));
			bool o = obj.CreateUnit(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PointIsWalkable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			bool o = obj.PointIsWalkable(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisposeLevelGlobelMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			Serclimax.ScDefineDisMsgEnum arg0 = (Serclimax.ScDefineDisMsgEnum)ToLua.CheckObject(L, 2, typeof(Serclimax.ScDefineDisMsgEnum));
			Serclimax.IScMsgBase arg1 = (Serclimax.IScMsgBase)ToLua.CheckObject(L, 3, typeof(Serclimax.IScMsgBase));
			obj.DisposeLevelGlobelMsg(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisposeActiveGuideMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			Serclimax.ScDefineDisMsgEnum arg0 = (Serclimax.ScDefineDisMsgEnum)ToLua.CheckObject(L, 2, typeof(Serclimax.ScDefineDisMsgEnum));
			Serclimax.IScMsgBase arg1 = (Serclimax.IScMsgBase)ToLua.CheckObject(L, 3, typeof(Serclimax.IScMsgBase));
			obj.DisposeActiveGuideMsg(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisposeActiveLevelHintMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			Serclimax.ScDefineDisMsgEnum arg0 = (Serclimax.ScDefineDisMsgEnum)ToLua.CheckObject(L, 2, typeof(Serclimax.ScDefineDisMsgEnum));
			Serclimax.IScMsgBase arg1 = (Serclimax.IScMsgBase)ToLua.CheckObject(L, 3, typeof(Serclimax.IScMsgBase));
			obj.DisposeActiveLevelHintMsg(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisposeProductionStartMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			Serclimax.ScDefineDisMsgEnum arg0 = (Serclimax.ScDefineDisMsgEnum)ToLua.CheckObject(L, 2, typeof(Serclimax.ScDefineDisMsgEnum));
			Serclimax.IScMsgBase arg1 = (Serclimax.IScMsgBase)ToLua.CheckObject(L, 3, typeof(Serclimax.IScMsgBase));
			obj.DisposeProductionStartMsg(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisposeRagionUpdateMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			Serclimax.ScDefineDisMsgEnum arg0 = (Serclimax.ScDefineDisMsgEnum)ToLua.CheckObject(L, 2, typeof(Serclimax.ScDefineDisMsgEnum));
			Serclimax.IScMsgBase arg1 = (Serclimax.IScMsgBase)ToLua.CheckObject(L, 3, typeof(Serclimax.IScMsgBase));
			obj.DisposeRagionUpdateMsg(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisposeScreenLockMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			Serclimax.ScDefineDisMsgEnum arg0 = (Serclimax.ScDefineDisMsgEnum)ToLua.CheckObject(L, 2, typeof(Serclimax.ScDefineDisMsgEnum));
			Serclimax.IScMsgBase arg1 = (Serclimax.IScMsgBase)ToLua.CheckObject(L, 3, typeof(Serclimax.IScMsgBase));
			obj.DisposeScreenLockMsg(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnLoadFinished(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			obj.OnLoadFinished();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DebugTest(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.DebugTest(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TouchTest(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			obj.TouchTest();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GCManual(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			obj.GCManual();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddUnlockMaxAmryID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.AddUnlockMaxAmryID(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMaskObjs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			UnityEngine.GameObject[] o = obj.GetMaskObjs();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RequestEscapeBattle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			SceneManager obj = (SceneManager)ToLua.CheckObject(L, 1, typeof(SceneManager));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			uint arg4 = (uint)LuaDLL.luaL_checknumber(L, 6);
			SceneManager.CallbackFunc arg5 = null;
			LuaTypes funcType7 = LuaDLL.lua_type(L, 7);

			if (funcType7 != LuaTypes.LUA_TFUNCTION)
			{
				 arg5 = (SceneManager.CallbackFunc)ToLua.CheckObject(L, 7, typeof(SceneManager.CallbackFunc));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 7);
				arg5 = DelegateFactory.CreateDelegate(typeof(SceneManager.CallbackFunc), func) as SceneManager.CallbackFunc;
			}

			bool o = obj.RequestEscapeBattle(arg0, arg1, arg2, arg3, arg4, arg5);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GameOverMinTimeScale(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, SceneManager.GameOverMinTimeScale);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GameOverAnimTotalTime(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, SceneManager.GameOverAnimTotalTime);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_gScTableData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			Serclimax.ScTableMgr ret = obj.gScTableData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index gScTableData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_gScRoots(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			Serclimax.ScRoot ret = obj.gScRoots;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index gScRoots on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onSceneLoadFinished(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			SceneManager.OnSceneLoadFinished ret = obj.onSceneLoadFinished;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onSceneLoadFinished on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onGameOver(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			SceneManager.OnGameOver ret = obj.onGameOver;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onGameOver on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isScreenLock(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			bool ret = obj.isScreenLock;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isScreenLock on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Entity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			SceneEntity ret = obj.Entity;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Entity on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GroupObj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			UnityEngine.GameObject ret = obj.GroupObj;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index GroupObj on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, SceneManager.instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurLevelData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			XLevelDataXML ret = obj.CurLevelData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CurLevelData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LevelRoot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			UnityEngine.Transform ret = obj.LevelRoot;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index LevelRoot on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Astar(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			Serclimax.NiceAstarPath ret = obj.Astar;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Astar on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurChapterName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			string ret = obj.CurChapterName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CurChapterName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurLevelName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			string ret = obj.CurLevelName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CurLevelName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GameWin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			bool ret = obj.GameWin;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index GameWin on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_gameOverState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			SceneManager.GameOverStateType ret = obj.gameOverState;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index gameOverState on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_gScTableData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			Serclimax.ScTableMgr arg0 = (Serclimax.ScTableMgr)ToLua.CheckObject(L, 2, typeof(Serclimax.ScTableMgr));
			obj.gScTableData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index gScTableData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_gScRoots(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			Serclimax.ScRoot arg0 = (Serclimax.ScRoot)ToLua.CheckObject(L, 2, typeof(Serclimax.ScRoot));
			obj.gScRoots = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index gScRoots on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onSceneLoadFinished(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			SceneManager.OnSceneLoadFinished arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (SceneManager.OnSceneLoadFinished)ToLua.CheckObject(L, 2, typeof(SceneManager.OnSceneLoadFinished));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(SceneManager.OnSceneLoadFinished), func) as SceneManager.OnSceneLoadFinished;
			}

			obj.onSceneLoadFinished = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onSceneLoadFinished on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onGameOver(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			SceneManager.OnGameOver arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (SceneManager.OnGameOver)ToLua.CheckObject(L, 2, typeof(SceneManager.OnGameOver));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(SceneManager.OnGameOver), func) as SceneManager.OnGameOver;
			}

			obj.onGameOver = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onGameOver on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isScreenLock(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isScreenLock = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isScreenLock on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Entity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			SceneEntity arg0 = (SceneEntity)ToLua.CheckUnityObject(L, 2, typeof(SceneEntity));
			obj.Entity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Entity on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CurLevelData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			XLevelDataXML arg0 = (XLevelDataXML)ToLua.CheckObject(L, 2, typeof(XLevelDataXML));
			obj.CurLevelData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CurLevelData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Astar(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			Serclimax.NiceAstarPath arg0 = (Serclimax.NiceAstarPath)ToLua.CheckObject(L, 2, typeof(Serclimax.NiceAstarPath));
			obj.Astar = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Astar on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CurChapterName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.CurChapterName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CurChapterName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CurLevelName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.CurLevelName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CurLevelName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GameWin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneManager obj = (SceneManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.GameWin = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index GameWin on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SceneManager_CallbackFunc(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			Delegate arg1 = DelegateFactory.CreateDelegate(typeof(SceneManager.CallbackFunc), func);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SceneManager_OnGameOver(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			Delegate arg1 = DelegateFactory.CreateDelegate(typeof(SceneManager.OnGameOver), func);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SceneManager_OnSceneLoadFinished(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			Delegate arg1 = DelegateFactory.CreateDelegate(typeof(SceneManager.OnSceneLoadFinished), func);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

