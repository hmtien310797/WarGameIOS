//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Text_EncodingWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Text.Encoding), typeof(System.Object));
		L.RegFunction("Convert", Convert);
		L.RegFunction("Equals", Equals);
		L.RegFunction("GetByteCount", GetByteCount);
		L.RegFunction("GetBytes", GetBytes);
		L.RegFunction("GetCharCount", GetCharCount);
		L.RegFunction("GetChars", GetChars);
		L.RegFunction("GetDecoder", GetDecoder);
		L.RegFunction("GetEncoder", GetEncoder);
		L.RegFunction("GetEncoding", GetEncoding);
		L.RegFunction("Clone", Clone);
		L.RegFunction("GetEncodings", GetEncodings);
		L.RegFunction("IsAlwaysNormalized", IsAlwaysNormalized);
		L.RegFunction("GetHashCode", GetHashCode);
		L.RegFunction("GetMaxByteCount", GetMaxByteCount);
		L.RegFunction("GetMaxCharCount", GetMaxCharCount);
		L.RegFunction("GetPreamble", GetPreamble);
		L.RegFunction("GetString", GetString);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("IsReadOnly", get_IsReadOnly, null);
		L.RegVar("IsSingleByte", get_IsSingleByte, null);
		L.RegVar("DecoderFallback", get_DecoderFallback, set_DecoderFallback);
		L.RegVar("EncoderFallback", get_EncoderFallback, set_EncoderFallback);
		L.RegVar("BodyName", get_BodyName, null);
		L.RegVar("CodePage", get_CodePage, null);
		L.RegVar("EncodingName", get_EncodingName, null);
		L.RegVar("HeaderName", get_HeaderName, null);
		L.RegVar("IsBrowserDisplay", get_IsBrowserDisplay, null);
		L.RegVar("IsBrowserSave", get_IsBrowserSave, null);
		L.RegVar("IsMailNewsDisplay", get_IsMailNewsDisplay, null);
		L.RegVar("IsMailNewsSave", get_IsMailNewsSave, null);
		L.RegVar("WebName", get_WebName, null);
		L.RegVar("WindowsCodePage", get_WindowsCodePage, null);
		L.RegVar("ASCII", get_ASCII, null);
		L.RegVar("BigEndianUnicode", get_BigEndianUnicode, null);
		L.RegVar("Default", get_Default, null);
		L.RegVar("UTF7", get_UTF7, null);
		L.RegVar("UTF8", get_UTF8, null);
		L.RegVar("Unicode", get_Unicode, null);
		L.RegVar("UTF32", get_UTF32, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Convert(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(System.Text.Encoding), typeof(System.Text.Encoding), typeof(byte[])))
			{
				System.Text.Encoding arg0 = (System.Text.Encoding)ToLua.ToObject(L, 1);
				System.Text.Encoding arg1 = (System.Text.Encoding)ToLua.ToObject(L, 2);
				byte[] arg2 = ToLua.CheckByteBuffer(L, 3);
				byte[] o = System.Text.Encoding.Convert(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(System.Text.Encoding), typeof(System.Text.Encoding), typeof(byte[]), typeof(int), typeof(int)))
			{
				System.Text.Encoding arg0 = (System.Text.Encoding)ToLua.ToObject(L, 1);
				System.Text.Encoding arg1 = (System.Text.Encoding)ToLua.ToObject(L, 2);
				byte[] arg2 = ToLua.CheckByteBuffer(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
				byte[] o = System.Text.Encoding.Convert(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Text.Encoding.Convert");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equals(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Text.Encoding obj = (System.Text.Encoding)ToLua.CheckObject(L, 1, typeof(System.Text.Encoding));
			object arg0 = ToLua.ToVarObject(L, 2);
			bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetByteCount(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.Text.Encoding), typeof(char[])))
			{
				System.Text.Encoding obj = (System.Text.Encoding)ToLua.ToObject(L, 1);
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				int o = obj.GetByteCount(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.Text.Encoding), typeof(string)))
			{
				System.Text.Encoding obj = (System.Text.Encoding)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int o = obj.GetByteCount(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(System.Text.Encoding), typeof(char[]), typeof(int), typeof(int)))
			{
				System.Text.Encoding obj = (System.Text.Encoding)ToLua.ToObject(L, 1);
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				int o = obj.GetByteCount(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Text.Encoding.GetByteCount");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBytes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.Text.Encoding), typeof(string)))
			{
				System.Text.Encoding obj = (System.Text.Encoding)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				byte[] o = obj.GetBytes(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.Text.Encoding), typeof(char[])))
			{
				System.Text.Encoding obj = (System.Text.Encoding)ToLua.ToObject(L, 1);
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				byte[] o = obj.GetBytes(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(System.Text.Encoding), typeof(char[]), typeof(int), typeof(int)))
			{
				System.Text.Encoding obj = (System.Text.Encoding)ToLua.ToObject(L, 1);
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				byte[] o = obj.GetBytes(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			
			else if (count == 6 && TypeChecker.CheckTypes(L, 1, typeof(System.Text.Encoding), typeof(char[]), typeof(int), typeof(int), typeof(byte[]), typeof(int)))
			{
				System.Text.Encoding obj = (System.Text.Encoding)ToLua.ToObject(L, 1);
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				byte[] arg3 = ToLua.CheckByteBuffer(L, 5);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 6);
				int o = obj.GetBytes(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes(L, 1, typeof(System.Text.Encoding), typeof(string), typeof(int), typeof(int), typeof(byte[]), typeof(int)))
			{
				System.Text.Encoding obj = (System.Text.Encoding)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				byte[] arg3 = ToLua.CheckByteBuffer(L, 5);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 6);
				int o = obj.GetBytes(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Text.Encoding.GetBytes");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCharCount(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.Text.Encoding), typeof(byte[])))
			{
				System.Text.Encoding obj = (System.Text.Encoding)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int o = obj.GetCharCount(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(System.Text.Encoding), typeof(byte[]), typeof(int), typeof(int)))
			{
				System.Text.Encoding obj = (System.Text.Encoding)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				int o = obj.GetCharCount(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Text.Encoding.GetCharCount");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetChars(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.Text.Encoding), typeof(byte[])))
			{
				System.Text.Encoding obj = (System.Text.Encoding)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				char[] o = obj.GetChars(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(System.Text.Encoding), typeof(byte[]), typeof(int), typeof(int)))
			{
				System.Text.Encoding obj = (System.Text.Encoding)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				char[] o = obj.GetChars(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			
			else if (count == 6 && TypeChecker.CheckTypes(L, 1, typeof(System.Text.Encoding), typeof(byte[]), typeof(int), typeof(int), typeof(char[]), typeof(int)))
			{
				System.Text.Encoding obj = (System.Text.Encoding)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				char[] arg3 = ToLua.CheckCharBuffer(L, 5);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 6);
				int o = obj.GetChars(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Text.Encoding.GetChars");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDecoder(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Text.Encoding obj = (System.Text.Encoding)ToLua.CheckObject(L, 1, typeof(System.Text.Encoding));
			System.Text.Decoder o = obj.GetDecoder();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEncoder(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Text.Encoding obj = (System.Text.Encoding)ToLua.CheckObject(L, 1, typeof(System.Text.Encoding));
			System.Text.Encoder o = obj.GetEncoder();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEncoding(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Text.Encoding o = System.Text.Encoding.GetEncoding(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(int)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				System.Text.Encoding o = System.Text.Encoding.GetEncoding(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(System.Text.EncoderFallback), typeof(System.Text.DecoderFallback)))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Text.EncoderFallback arg1 = (System.Text.EncoderFallback)ToLua.ToObject(L, 2);
				System.Text.DecoderFallback arg2 = (System.Text.DecoderFallback)ToLua.ToObject(L, 3);
				System.Text.Encoding o = System.Text.Encoding.GetEncoding(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(System.Text.EncoderFallback), typeof(System.Text.DecoderFallback)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				System.Text.EncoderFallback arg1 = (System.Text.EncoderFallback)ToLua.ToObject(L, 2);
				System.Text.DecoderFallback arg2 = (System.Text.DecoderFallback)ToLua.ToObject(L, 3);
				System.Text.Encoding o = System.Text.Encoding.GetEncoding(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Text.Encoding.GetEncoding");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Text.Encoding obj = (System.Text.Encoding)ToLua.CheckObject(L, 1, typeof(System.Text.Encoding));
			object o = obj.Clone();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEncodings(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			System.Text.EncodingInfo[] o = System.Text.Encoding.GetEncodings();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsAlwaysNormalized(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(System.Text.Encoding)))
			{
				System.Text.Encoding obj = (System.Text.Encoding)ToLua.ToObject(L, 1);
				bool o = obj.IsAlwaysNormalized();
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.Text.Encoding), typeof(System.Text.NormalizationForm)))
			{
				System.Text.Encoding obj = (System.Text.Encoding)ToLua.ToObject(L, 1);
				System.Text.NormalizationForm arg0 = (System.Text.NormalizationForm)ToLua.ToObject(L, 2);
				bool o = obj.IsAlwaysNormalized(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Text.Encoding.IsAlwaysNormalized");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Text.Encoding obj = (System.Text.Encoding)ToLua.CheckObject(L, 1, typeof(System.Text.Encoding));
			int o = obj.GetHashCode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMaxByteCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Text.Encoding obj = (System.Text.Encoding)ToLua.CheckObject(L, 1, typeof(System.Text.Encoding));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = obj.GetMaxByteCount(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMaxCharCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Text.Encoding obj = (System.Text.Encoding)ToLua.CheckObject(L, 1, typeof(System.Text.Encoding));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = obj.GetMaxCharCount(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPreamble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Text.Encoding obj = (System.Text.Encoding)ToLua.CheckObject(L, 1, typeof(System.Text.Encoding));
			byte[] o = obj.GetPreamble();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.Text.Encoding), typeof(byte[])))
			{
				System.Text.Encoding obj = (System.Text.Encoding)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				string o = obj.GetString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(System.Text.Encoding), typeof(byte[]), typeof(int), typeof(int)))
			{
				System.Text.Encoding obj = (System.Text.Encoding)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				string o = obj.GetString(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Text.Encoding.GetString");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsReadOnly(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Text.Encoding obj = (System.Text.Encoding)o;
			bool ret = obj.IsReadOnly;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsReadOnly on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsSingleByte(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Text.Encoding obj = (System.Text.Encoding)o;
			bool ret = obj.IsSingleByte;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsSingleByte on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DecoderFallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Text.Encoding obj = (System.Text.Encoding)o;
			System.Text.DecoderFallback ret = obj.DecoderFallback;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DecoderFallback on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EncoderFallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Text.Encoding obj = (System.Text.Encoding)o;
			System.Text.EncoderFallback ret = obj.EncoderFallback;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EncoderFallback on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BodyName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Text.Encoding obj = (System.Text.Encoding)o;
			string ret = obj.BodyName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BodyName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CodePage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Text.Encoding obj = (System.Text.Encoding)o;
			int ret = obj.CodePage;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CodePage on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EncodingName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Text.Encoding obj = (System.Text.Encoding)o;
			string ret = obj.EncodingName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EncodingName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HeaderName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Text.Encoding obj = (System.Text.Encoding)o;
			string ret = obj.HeaderName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index HeaderName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsBrowserDisplay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Text.Encoding obj = (System.Text.Encoding)o;
			bool ret = obj.IsBrowserDisplay;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsBrowserDisplay on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsBrowserSave(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Text.Encoding obj = (System.Text.Encoding)o;
			bool ret = obj.IsBrowserSave;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsBrowserSave on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsMailNewsDisplay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Text.Encoding obj = (System.Text.Encoding)o;
			bool ret = obj.IsMailNewsDisplay;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsMailNewsDisplay on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsMailNewsSave(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Text.Encoding obj = (System.Text.Encoding)o;
			bool ret = obj.IsMailNewsSave;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsMailNewsSave on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WebName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Text.Encoding obj = (System.Text.Encoding)o;
			string ret = obj.WebName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index WebName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WindowsCodePage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Text.Encoding obj = (System.Text.Encoding)o;
			int ret = obj.WindowsCodePage;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index WindowsCodePage on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ASCII(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, System.Text.Encoding.ASCII);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BigEndianUnicode(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, System.Text.Encoding.BigEndianUnicode);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Default(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, System.Text.Encoding.Default);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UTF7(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, System.Text.Encoding.UTF7);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UTF8(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, System.Text.Encoding.UTF8);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Unicode(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, System.Text.Encoding.Unicode);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UTF32(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, System.Text.Encoding.UTF32);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DecoderFallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Text.Encoding obj = (System.Text.Encoding)o;
			System.Text.DecoderFallback arg0 = (System.Text.DecoderFallback)ToLua.CheckObject(L, 2, typeof(System.Text.DecoderFallback));
			obj.DecoderFallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DecoderFallback on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EncoderFallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Text.Encoding obj = (System.Text.Encoding)o;
			System.Text.EncoderFallback arg0 = (System.Text.EncoderFallback)ToLua.CheckObject(L, 2, typeof(System.Text.EncoderFallback));
			obj.EncoderFallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EncoderFallback on a nil value" : e.Message);
		}
	}
}

