//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Serclimax_GameTimeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("GameTime");
		L.RegFunction("GetMilSecTime", GetMilSecTime);
		L.RegFunction("GetSecTime", GetSecTime);
		L.RegFunction("GetEscapedTime", GetEscapedTime);
		L.RegFunction("GetEscapedTimeSec", GetEscapedTimeSec);
		L.RegFunction("MilSecToString", MilSecToString);
		L.RegFunction("SecondToString", SecondToString);
		L.RegFunction("SecondToString2", SecondToString2);
		L.RegFunction("SecondToString3", SecondToString3);
		L.RegFunction("SecondToDate", SecondToDate);
		L.RegFunction("SecondToStringYMDLocal", SecondToStringYMDLocal);
		L.RegFunction("SecondToStringFormat", SecondToStringFormat);
		L.RegFunction("SecondToStringHHMM", SecondToStringHHMM);
		L.RegFunction("SetServerTime", SetServerTime);
		L.RegFunction("SetServerDayStartTime", SetServerDayStartTime);
		L.RegFunction("GetServerDayStartTime", GetServerDayStartTime);
		L.RegFunction("GetServerDayStartTimeMilSec", GetServerDayStartTimeMilSec);
		L.RegFunction("GetServerTimeSec", GetServerTimeSec);
		L.RegFunction("SecondToMilSec", SecondToMilSec);
		L.RegFunction("NANOSECOND_GetTimeSinceStart", NANOSECOND_GetTimeSinceStart);
		L.RegFunction("NANOSECOND_GetEscapeTime", NANOSECOND_GetEscapeTime);
		L.RegFunction("NowHour", NowHour);
		L.RegFunction("NowMinuts", NowMinuts);
		L.RegFunction("NowSecond", NowSecond);
		L.RegFunction("DaySecond", DaySecond);
		L.RegFunction("CurrentTime_Client", CurrentTime_Client);
		L.RegVar("sUseServerTime", get_sUseServerTime, set_sUseServerTime);
		L.RegVar("gameSpeed", get_gameSpeed, set_gameSpeed);
		L.RegVar("time", get_time, null);
		L.RegVar("deltaTime", get_deltaTime, null);
		L.RegVar("timeScale", get_timeScale, set_timeScale);
		L.RegVar("realTime", get_realTime, null);
		L.RegVar("realDeltaTime", get_realDeltaTime, null);
		L.RegVar("realDeltaTimeWithoutSpeedUp", get_realDeltaTimeWithoutSpeedUp, null);
		L.RegVar("DaySeconds", get_DaySeconds, null);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMilSecTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			long o = Serclimax.GameTime.GetMilSecTime();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSecTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			long o = Serclimax.GameTime.GetSecTime();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEscapedTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			long arg0 = (long)LuaDLL.luaL_checknumber(L, 1);
			long o = Serclimax.GameTime.GetEscapedTime(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEscapedTimeSec(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			long arg0 = (long)LuaDLL.luaL_checknumber(L, 1);
			int o = Serclimax.GameTime.GetEscapedTimeSec(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MilSecToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			long arg0 = (long)LuaDLL.luaL_checknumber(L, 1);
			string o = Serclimax.GameTime.MilSecToString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SecondToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = Serclimax.GameTime.SecondToString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SecondToString2(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = Serclimax.GameTime.SecondToString2(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SecondToString3(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = Serclimax.GameTime.SecondToString3(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SecondToDate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			long arg0 = (long)LuaDLL.luaL_checknumber(L, 1);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			string o = Serclimax.GameTime.SecondToDate(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SecondToStringYMDLocal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 1);
			string o = Serclimax.GameTime.SecondToStringYMDLocal(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SecondToStringFormat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			string o = Serclimax.GameTime.SecondToStringFormat(arg0, arg1, arg2);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SecondToStringHHMM(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = Serclimax.GameTime.SecondToStringHHMM(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetServerTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			Serclimax.GameTime.SetServerTime(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetServerDayStartTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			Serclimax.GameTime.SetServerDayStartTime(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetServerDayStartTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = Serclimax.GameTime.GetServerDayStartTime();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetServerDayStartTimeMilSec(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			long o = Serclimax.GameTime.GetServerDayStartTimeMilSec();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetServerTimeSec(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = Serclimax.GameTime.GetServerTimeSec();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SecondToMilSec(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			long o = Serclimax.GameTime.SecondToMilSec(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NANOSECOND_GetTimeSinceStart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			long o = Serclimax.GameTime.NANOSECOND_GetTimeSinceStart();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NANOSECOND_GetEscapeTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			long arg0 = (long)LuaDLL.luaL_checknumber(L, 1);
			long o = Serclimax.GameTime.NANOSECOND_GetEscapeTime(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NowHour(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = Serclimax.GameTime.NowHour();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NowMinuts(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = Serclimax.GameTime.NowMinuts();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NowSecond(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = Serclimax.GameTime.NowSecond();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DaySecond(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = Serclimax.GameTime.DaySecond();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CurrentTime_Client(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = Serclimax.GameTime.CurrentTime_Client();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sUseServerTime(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, Serclimax.GameTime.sUseServerTime);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_gameSpeed(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.GameTime.gameSpeed);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_time(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.GameTime.time);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_deltaTime(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.GameTime.deltaTime);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_timeScale(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.GameTime.timeScale);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_realTime(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.GameTime.realTime);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_realDeltaTime(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.GameTime.realDeltaTime);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_realDeltaTimeWithoutSpeedUp(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Serclimax.GameTime.realDeltaTimeWithoutSpeedUp);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DaySeconds(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Serclimax.GameTime.DaySeconds);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sUseServerTime(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			Serclimax.GameTime.sUseServerTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_gameSpeed(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			Serclimax.GameTime.gameSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_timeScale(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			Serclimax.GameTime.timeScale = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

