//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class TextManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(TextManager), typeof(System.Object));
		L.RegFunction("Clear", Clear);
		L.RegFunction("LoadLanguage4Prefs", LoadLanguage4Prefs);
		L.RegFunction("LoadLanguage", LoadLanguage);
		L.RegFunction("ReloadLanguage", ReloadLanguage);
		L.RegFunction("SetCurLanguage", SetCurLanguage);
		L.RegFunction("GetCurrentLanguage", GetCurrentLanguage);
		L.RegFunction("GetCurrentLanguageID", GetCurrentLanguageID);
		L.RegFunction("GetText", GetText);
		L.RegFunction("RemoveColor", RemoveColor);
		L.RegFunction("ContainText", ContainText);
		L.RegFunction("GetTextHeader", GetTextHeader);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegConstant("LANGUAGE_COUNT", 11);
		L.RegVar("DefaultLanguage", get_DefaultLanguage, null);
		L.RegVar("SysTolocalMap", get_SysTolocalMap, set_SysTolocalMap);
		L.RegVar("FILENAME", get_FILENAME, set_FILENAME);
		L.RegVar("USE_EASTEN_CHARACTER", get_USE_EASTEN_CHARACTER, set_USE_EASTEN_CHARACTER);
		L.RegVar("currentLanguage", get_currentLanguage, set_currentLanguage);
		L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TextManager obj = (TextManager)ToLua.CheckObject(L, 1, typeof(TextManager));
			obj.Clear();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadLanguage4Prefs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TextManager obj = (TextManager)ToLua.CheckObject(L, 1, typeof(TextManager));
			bool o = obj.LoadLanguage4Prefs();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadLanguage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TextManager obj = (TextManager)ToLua.CheckObject(L, 1, typeof(TextManager));
			TextManager.LANGUAGE arg0 = (TextManager.LANGUAGE)ToLua.CheckObject(L, 2, typeof(TextManager.LANGUAGE));
			bool o = obj.LoadLanguage(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReloadLanguage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TextManager obj = (TextManager)ToLua.CheckObject(L, 1, typeof(TextManager));
			bool o = obj.ReloadLanguage();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCurLanguage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TextManager obj = (TextManager)ToLua.CheckObject(L, 1, typeof(TextManager));
			TextManager.LANGUAGE arg0 = (TextManager.LANGUAGE)ToLua.CheckObject(L, 2, typeof(TextManager.LANGUAGE));
			obj.SetCurLanguage(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurrentLanguage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TextManager obj = (TextManager)ToLua.CheckObject(L, 1, typeof(TextManager));
			TextManager.LANGUAGE o = obj.GetCurrentLanguage();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurrentLanguageID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TextManager obj = (TextManager)ToLua.CheckObject(L, 1, typeof(TextManager));
			int o = obj.GetCurrentLanguageID();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetText(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(TextManager), typeof(string)))
			{
				TextManager obj = (TextManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string o = obj.GetText(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(TextManager), typeof(int)))
			{
				TextManager obj = (TextManager)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				string o = obj.GetText(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: TextManager.GetText");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TextManager obj = (TextManager)ToLua.CheckObject(L, 1, typeof(TextManager));
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.RemoveColor(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ContainText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TextManager obj = (TextManager)ToLua.CheckObject(L, 1, typeof(TextManager));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.ContainText(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTextHeader(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TextManager obj = (TextManager)ToLua.CheckObject(L, 1, typeof(TextManager));
			System.Collections.Generic.Dictionary<string,int> o = obj.GetTextHeader();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DefaultLanguage(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, TextManager.DefaultLanguage);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SysTolocalMap(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, TextManager.SysTolocalMap);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FILENAME(IntPtr L)
	{
		try
		{
			ToLua.Push(L, TextManager.FILENAME);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_USE_EASTEN_CHARACTER(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, TextManager.USE_EASTEN_CHARACTER);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentLanguage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TextManager obj = (TextManager)o;
			TextManager.LANGUAGE ret = obj.currentLanguage;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index currentLanguage on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, TextManager.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SysTolocalMap(IntPtr L)
	{
		try
		{
			System.Collections.Generic.Dictionary<UnityEngine.SystemLanguage,TextManager.LANGUAGE> arg0 = (System.Collections.Generic.Dictionary<UnityEngine.SystemLanguage,TextManager.LANGUAGE>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<UnityEngine.SystemLanguage,TextManager.LANGUAGE>));
			TextManager.SysTolocalMap = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FILENAME(IntPtr L)
	{
		try
		{
			string[] arg0 = ToLua.CheckStringArray(L, 2);
			TextManager.FILENAME = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_USE_EASTEN_CHARACTER(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			TextManager.USE_EASTEN_CHARACTER = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_currentLanguage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TextManager obj = (TextManager)o;
			TextManager.LANGUAGE arg0 = (TextManager.LANGUAGE)ToLua.CheckObject(L, 2, typeof(TextManager.LANGUAGE));
			obj.currentLanguage = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index currentLanguage on a nil value" : e.Message);
		}
	}
}

