//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaNetworkWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("LuaNetwork");
		L.RegFunction("Request", Request);
		L.RegFunction("Response", Response);
		L.RegFunction("RegisterPush", RegisterPush);
		L.RegFunction("EnableLog", EnableLog);
		L.RegFunction("CallbackFunc", LuaNetwork_CallbackFunc);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Request(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 1);
			uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 2);
			LuaByteBuffer arg2 = new LuaByteBuffer(ToLua.CheckByteBuffer(L, 3));
			LuaNetwork.CallbackFunc arg3 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg3 = (LuaNetwork.CallbackFunc)ToLua.CheckObject(L, 4, typeof(LuaNetwork.CallbackFunc));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg3 = DelegateFactory.CreateDelegate(typeof(LuaNetwork.CallbackFunc), func) as LuaNetwork.CallbackFunc;
			}

			bool arg4 = LuaDLL.luaL_checkboolean(L, 5);
			uint o = LuaNetwork.Request(arg0, arg1, arg2, arg3, arg4);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Response(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 1);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
			LuaNetwork.CallbackFunc arg2 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (LuaNetwork.CallbackFunc)ToLua.CheckObject(L, 3, typeof(LuaNetwork.CallbackFunc));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg2 = DelegateFactory.CreateDelegate(typeof(LuaNetwork.CallbackFunc), func) as LuaNetwork.CallbackFunc;
			}

			LuaNetwork.Response(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterPush(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 1);
			uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 2);
			LuaNetwork.CallbackFunc arg2 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (LuaNetwork.CallbackFunc)ToLua.CheckObject(L, 3, typeof(LuaNetwork.CallbackFunc));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg2 = DelegateFactory.CreateDelegate(typeof(LuaNetwork.CallbackFunc), func) as LuaNetwork.CallbackFunc;
			}

			LuaNetwork.RegisterPush(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnableLog(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = LuaNetwork.EnableLog();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaNetwork_CallbackFunc(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			Delegate arg1 = DelegateFactory.CreateDelegate(typeof(LuaNetwork.CallbackFunc), func);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

