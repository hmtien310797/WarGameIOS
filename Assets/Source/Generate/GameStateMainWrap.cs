//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameStateMainWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameStateMain), typeof(GameState));
		L.RegFunction("ClearMainCity", ClearMainCity);
		L.RegFunction("OnEnter", OnEnter);
		L.RegFunction("OnLeave", OnLeave);
		L.RegFunction("OnUpdate", OnUpdate);
		L.RegFunction("OnFixedUpdate", OnFixedUpdate);
		L.RegFunction("LoadMainCity", LoadMainCity);
		L.RegFunction("GetVersion", GetVersion);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearMainCity(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameStateMain obj = (GameStateMain)ToLua.CheckObject(L, 1, typeof(GameStateMain));
			obj.ClearMainCity();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnEnter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GameStateMain obj = (GameStateMain)ToLua.CheckObject(L, 1, typeof(GameStateMain));
			string arg0 = ToLua.CheckString(L, 2);
			System.Action arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action)ToLua.CheckObject(L, 3, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			obj.OnEnter(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnLeave(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameStateMain obj = (GameStateMain)ToLua.CheckObject(L, 1, typeof(GameStateMain));
			obj.OnLeave();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameStateMain obj = (GameStateMain)ToLua.CheckObject(L, 1, typeof(GameStateMain));
			obj.OnUpdate();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnFixedUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameStateMain obj = (GameStateMain)ToLua.CheckObject(L, 1, typeof(GameStateMain));
			obj.OnFixedUpdate();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadMainCity(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameStateMain obj = (GameStateMain)ToLua.CheckObject(L, 1, typeof(GameStateMain));
			string arg0 = ToLua.CheckString(L, 2);
			obj.LoadMainCity(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameStateMain obj = (GameStateMain)ToLua.CheckObject(L, 1, typeof(GameStateMain));
			string o = obj.GetVersion();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, GameStateMain.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

