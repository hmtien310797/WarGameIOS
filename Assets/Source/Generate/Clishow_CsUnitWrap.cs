//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Clishow_CsUnitWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Clishow.CsUnit), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("InitUnit", InitUnit);
		L.RegFunction("GetFirePosForBuilding", GetFirePosForBuilding);
		L.RegFunction("DestroyUnitImmediate", DestroyUnitImmediate);
		L.RegFunction("DestroyUnit", DestroyUnit);
		L.RegFunction("PlaySfx", PlaySfx);
		L.RegFunction("UpdateFromMgr", UpdateFromMgr);
		L.RegFunction("OnDeadFly", OnDeadFly);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("DispalyCorpse", get_DispalyCorpse, set_DispalyCorpse);
		L.RegVar("_modelPrefab", get__modelPrefab, set__modelPrefab);
		L.RegVar("_lowModelPrefab", get__lowModelPrefab, set__lowModelPrefab);
		L.RegVar("unitType", get_unitType, set_unitType);
		L.RegVar("Step", get_Step, set_Step);
		L.RegVar("SoliderHight", get_SoliderHight, set_SoliderHight);
		L.RegVar("WaitDeadAnimTime", get_WaitDeadAnimTime, set_WaitDeadAnimTime);
		L.RegVar("DeadFadeTime", get_DeadFadeTime, set_DeadFadeTime);
		L.RegVar("EnableDeadFade", get_EnableDeadFade, set_EnableDeadFade);
		L.RegVar("Eff_PointHurtName", get_Eff_PointHurtName, set_Eff_PointHurtName);
		L.RegVar("Eff_DiffacHurtName", get_Eff_DiffacHurtName, set_Eff_DiffacHurtName);
		L.RegVar("EFf_FireHurtName", get_EFf_FireHurtName, set_EFf_FireHurtName);
		L.RegVar("Eff_DeadEffectName", get_Eff_DeadEffectName, set_Eff_DeadEffectName);
		L.RegVar("Eff_BornEffectName", get_Eff_BornEffectName, set_Eff_BornEffectName);
		L.RegVar("Eff_FlamethrowerName", get_Eff_FlamethrowerName, set_Eff_FlamethrowerName);
		L.RegVar("MoveSpeed", get_MoveSpeed, set_MoveSpeed);
		L.RegVar("DeadFlyDir", get_DeadFlyDir, set_DeadFlyDir);
		L.RegVar("DeadFlyRandTime", get_DeadFlyRandTime, set_DeadFlyRandTime);
		L.RegVar("BuildUnitDestroyEnableFire", get_BuildUnitDestroyEnableFire, set_BuildUnitDestroyEnableFire);
		L.RegVar("IsDead", get_IsDead, set_IsDead);
		L.RegVar("IsLevelImportTarget", get_IsLevelImportTarget, set_IsLevelImportTarget);
		L.RegVar("DeadMixAngle", get_DeadMixAngle, set_DeadMixAngle);
		L.RegVar("DeadKLimitAngle", get_DeadKLimitAngle, set_DeadKLimitAngle);
		L.RegVar("DeadAix", get_DeadAix, set_DeadAix);
		L.RegVar("OppositeDeadAix", get_OppositeDeadAix, set_OppositeDeadAix);
		L.RegVar("mUnitWeaponCount", get_mUnitWeaponCount, set_mUnitWeaponCount);
		L.RegVar("mBornStartTime", get_mBornStartTime, set_mBornStartTime);
		L.RegVar("unitTag", get_unitTag, set_unitTag);
		L.RegVar("isBuideTarget", get_isBuideTarget, set_isBuideTarget);
		L.RegVar("mUnitSfxTableId", get_mUnitSfxTableId, set_mUnitSfxTableId);
		L.RegVar("mUnitAudio", get_mUnitAudio, set_mUnitAudio);
		L.RegVar("MaxCastSkillNum", get_MaxCastSkillNum, null);
		L.RegVar("BindSkillInses", get_BindSkillInses, set_BindSkillInses);
		L.RegVar("BindBullteSkillInses", get_BindBullteSkillInses, set_BindBullteSkillInses);
		L.RegVar("ShowRifleFireTime", get_ShowRifleFireTime, set_ShowRifleFireTime);
		L.RegVar("ButtleOffset", get_ButtleOffset, set_ButtleOffset);
		L.RegVar("RifleFireName", get_RifleFireName, set_RifleFireName);
		L.RegVar("RifleFire", get_RifleFire, set_RifleFire);
		L.RegVar("BakeObj", get_BakeObj, set_BakeObj);
		L.RegVar("WPPOS", get_WPPOS, set_WPPOS);
		L.RegVar("WPDIR", get_WPDIR, set_WPDIR);
		L.RegVar("TargetAngle", get_TargetAngle, set_TargetAngle);
		L.RegVar("TargetAix", get_TargetAix, set_TargetAix);
		L.RegVar("OppositeTargetAix", get_OppositeTargetAix, set_OppositeTargetAix);
		L.RegVar("OnlyAttack", get_OnlyAttack, set_OnlyAttack);
		L.RegVar("LandingInfo", get_LandingInfo, set_LandingInfo);
		L.RegVar("mIsDestroy", get_mIsDestroy, set_mIsDestroy);
		L.RegVar("DeadFlyInfo", get_DeadFlyInfo, set_DeadFlyInfo);
		L.RegVar("Flamethrower", get_Flamethrower, set_Flamethrower);
		L.RegVar("SMRenderer", get_SMRenderer, set_SMRenderer);
		L.RegVar("SfxData", get_SfxData, set_SfxData);
		L.RegVar("UDeadState", get_UDeadState, null);
		L.RegVar("HUD", get_HUD, set_HUD);
		L.RegVar("StateEffect", get_StateEffect, set_StateEffect);
		L.RegVar("tableid", get_tableid, set_tableid);
		L.RegVar("uid", get_uid, set_uid);
		L.RegVar("Anim", get_Anim, null);
		L.RegVar("Syncer", get_Syncer, null);
		L.RegVar("UnitAttr", get_UnitAttr, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitUnit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Clishow.CsUnit obj = (Clishow.CsUnit)ToLua.CheckObject(L, 1, typeof(Clishow.CsUnit));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.InitUnit(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFirePosForBuilding(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Clishow.CsUnit obj = (Clishow.CsUnit)ToLua.CheckObject(L, 1, typeof(Clishow.CsUnit));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Vector3 o = obj.GetFirePosForBuilding(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyUnitImmediate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)ToLua.CheckObject(L, 1, typeof(Clishow.CsUnit));
			obj.DestroyUnitImmediate();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyUnit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)ToLua.CheckObject(L, 1, typeof(Clishow.CsUnit));
			obj.DestroyUnit();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlaySfx(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Clishow.CsUnit obj = (Clishow.CsUnit)ToLua.CheckObject(L, 1, typeof(Clishow.CsUnit));
			string arg0 = ToLua.CheckString(L, 2);
			obj.PlaySfx(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateFromMgr(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)ToLua.CheckObject(L, 1, typeof(Clishow.CsUnit));
			bool o = obj.UpdateFromMgr();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDeadFly(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Clishow.CsUnit obj = (Clishow.CsUnit)ToLua.CheckObject(L, 1, typeof(Clishow.CsUnit));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			bool o = obj.OnDeadFly(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DispalyCorpse(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			bool ret = obj.DispalyCorpse;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DispalyCorpse on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get__modelPrefab(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnityEngine.GameObject ret = obj._modelPrefab;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index _modelPrefab on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get__lowModelPrefab(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnityEngine.GameObject ret = obj._lowModelPrefab;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index _lowModelPrefab on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_unitType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			int ret = obj.unitType;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Step(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			float ret = obj.Step;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Step on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SoliderHight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			float ret = obj.SoliderHight;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SoliderHight on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WaitDeadAnimTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			float ret = obj.WaitDeadAnimTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index WaitDeadAnimTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DeadFadeTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			float ret = obj.DeadFadeTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DeadFadeTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EnableDeadFade(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			bool ret = obj.EnableDeadFade;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EnableDeadFade on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Eff_PointHurtName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			string ret = obj.Eff_PointHurtName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Eff_PointHurtName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Eff_DiffacHurtName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			string ret = obj.Eff_DiffacHurtName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Eff_DiffacHurtName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EFf_FireHurtName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			string ret = obj.EFf_FireHurtName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EFf_FireHurtName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Eff_DeadEffectName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			string ret = obj.Eff_DeadEffectName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Eff_DeadEffectName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Eff_BornEffectName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			string ret = obj.Eff_BornEffectName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Eff_BornEffectName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Eff_FlamethrowerName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			string ret = obj.Eff_FlamethrowerName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Eff_FlamethrowerName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MoveSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			float ret = obj.MoveSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MoveSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DeadFlyDir(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnityEngine.Vector3 ret = obj.DeadFlyDir;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DeadFlyDir on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DeadFlyRandTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			float ret = obj.DeadFlyRandTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DeadFlyRandTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BuildUnitDestroyEnableFire(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			bool ret = obj.BuildUnitDestroyEnableFire;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BuildUnitDestroyEnableFire on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsDead(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			bool ret = obj.IsDead;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsDead on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsLevelImportTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			bool ret = obj.IsLevelImportTarget;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsLevelImportTarget on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DeadMixAngle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnityEngine.Vector3 ret = obj.DeadMixAngle;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DeadMixAngle on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DeadKLimitAngle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnityEngine.Vector2 ret = obj.DeadKLimitAngle;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DeadKLimitAngle on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DeadAix(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			Clishow.CsUnit.AffectTargetAix ret = obj.DeadAix;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DeadAix on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OppositeDeadAix(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			bool ret = obj.OppositeDeadAix;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OppositeDeadAix on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mUnitWeaponCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			int ret = obj.mUnitWeaponCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mUnitWeaponCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mBornStartTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			float ret = obj.mBornStartTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mBornStartTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_unitTag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			string ret = obj.unitTag;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitTag on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isBuideTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			bool ret = obj.isBuideTarget;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isBuideTarget on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mUnitSfxTableId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			int ret = obj.mUnitSfxTableId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mUnitSfxTableId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mUnitAudio(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnityEngine.AudioSource ret = obj.mUnitAudio;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mUnitAudio on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxCastSkillNum(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Clishow.CsUnit.MaxCastSkillNum);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BindSkillInses(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			Clishow.CsSkillIns[] ret = obj.BindSkillInses;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BindSkillInses on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BindBullteSkillInses(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			Clishow.CsBullteSkillIns[] ret = obj.BindBullteSkillInses;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BindBullteSkillInses on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ShowRifleFireTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			float ret = obj.ShowRifleFireTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ShowRifleFireTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ButtleOffset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			float ret = obj.ButtleOffset;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ButtleOffset on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RifleFireName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			string ret = obj.RifleFireName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RifleFireName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RifleFire(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			Clishow.CsParticleController ret = obj.RifleFire;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RifleFire on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BakeObj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			Clishow.CsBakeObject ret = obj.BakeObj;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BakeObj on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WPPOS(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnityEngine.Vector3[] ret = obj.WPPOS;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index WPPOS on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WPDIR(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnityEngine.Quaternion[] ret = obj.WPDIR;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index WPDIR on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TargetAngle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			float ret = obj.TargetAngle;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetAngle on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TargetAix(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			Clishow.CsUnit.AffectTargetAix ret = obj.TargetAix;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetAix on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OppositeTargetAix(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			bool ret = obj.OppositeTargetAix;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OppositeTargetAix on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnlyAttack(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			bool ret = obj.OnlyAttack;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnlyAttack on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LandingInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			Clishow.CsUnitLandingInfo ret = obj.LandingInfo;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index LandingInfo on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mIsDestroy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			bool ret = obj.mIsDestroy;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mIsDestroy on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DeadFlyInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			Clishow.CsUnit.UnitDeadFlyInfo ret = obj.DeadFlyInfo;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DeadFlyInfo on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Flamethrower(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			CsFlamethrower ret = obj.Flamethrower;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Flamethrower on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SMRenderer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnityEngine.SkinnedMeshRenderer ret = obj.SMRenderer;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SMRenderer on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SfxData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			Serclimax.Unit.ScUnitSfxData ret = obj.SfxData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SfxData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UDeadState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			Clishow.CsUnit.DeadState ret = obj.UDeadState;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UDeadState on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HUD(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnitHud ret = obj.HUD;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index HUD on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StateEffect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnitStateEffect ret = obj.StateEffect;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index StateEffect on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_tableid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			int ret = obj.tableid;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index tableid on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_uid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			int ret = obj.uid;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index uid on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Anim(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnityEngine.Animation ret = obj.Anim;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Anim on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Syncer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			Clishow.CsSyncontroller<Serclimax.Unit.ScUnitMsg> ret = obj.Syncer;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Syncer on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UnitAttr(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			Clishow.CsUnitAttr ret = obj.UnitAttr;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UnitAttr on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DispalyCorpse(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.DispalyCorpse = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DispalyCorpse on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set__modelPrefab(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			obj._modelPrefab = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index _modelPrefab on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set__lowModelPrefab(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			obj._lowModelPrefab = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index _lowModelPrefab on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_unitType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.unitType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Step(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Step = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Step on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SoliderHight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SoliderHight = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SoliderHight on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WaitDeadAnimTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.WaitDeadAnimTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index WaitDeadAnimTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DeadFadeTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.DeadFadeTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DeadFadeTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EnableDeadFade(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.EnableDeadFade = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EnableDeadFade on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Eff_PointHurtName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Eff_PointHurtName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Eff_PointHurtName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Eff_DiffacHurtName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Eff_DiffacHurtName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Eff_DiffacHurtName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EFf_FireHurtName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.EFf_FireHurtName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EFf_FireHurtName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Eff_DeadEffectName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Eff_DeadEffectName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Eff_DeadEffectName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Eff_BornEffectName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Eff_BornEffectName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Eff_BornEffectName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Eff_FlamethrowerName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Eff_FlamethrowerName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Eff_FlamethrowerName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MoveSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.MoveSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MoveSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DeadFlyDir(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.DeadFlyDir = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DeadFlyDir on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DeadFlyRandTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.DeadFlyRandTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DeadFlyRandTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BuildUnitDestroyEnableFire(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.BuildUnitDestroyEnableFire = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BuildUnitDestroyEnableFire on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsDead(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsDead = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsDead on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsLevelImportTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsLevelImportTarget = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsLevelImportTarget on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DeadMixAngle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.DeadMixAngle = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DeadMixAngle on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DeadKLimitAngle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.DeadKLimitAngle = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DeadKLimitAngle on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DeadAix(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			Clishow.CsUnit.AffectTargetAix arg0 = (Clishow.CsUnit.AffectTargetAix)ToLua.CheckObject(L, 2, typeof(Clishow.CsUnit.AffectTargetAix));
			obj.DeadAix = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DeadAix on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OppositeDeadAix(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.OppositeDeadAix = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OppositeDeadAix on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mUnitWeaponCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.mUnitWeaponCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mUnitWeaponCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mBornStartTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.mBornStartTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mBornStartTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_unitTag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.unitTag = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitTag on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isBuideTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isBuideTarget = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isBuideTarget on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mUnitSfxTableId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.mUnitSfxTableId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mUnitSfxTableId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mUnitAudio(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnityEngine.AudioSource arg0 = (UnityEngine.AudioSource)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.AudioSource));
			obj.mUnitAudio = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mUnitAudio on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BindSkillInses(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			Clishow.CsSkillIns[] arg0 = ToLua.CheckObjectArray<Clishow.CsSkillIns>(L, 2);
			obj.BindSkillInses = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BindSkillInses on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BindBullteSkillInses(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			Clishow.CsBullteSkillIns[] arg0 = ToLua.CheckObjectArray<Clishow.CsBullteSkillIns>(L, 2);
			obj.BindBullteSkillInses = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BindBullteSkillInses on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ShowRifleFireTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.ShowRifleFireTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ShowRifleFireTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ButtleOffset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.ButtleOffset = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ButtleOffset on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RifleFireName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.RifleFireName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RifleFireName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RifleFire(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			Clishow.CsParticleController arg0 = (Clishow.CsParticleController)ToLua.CheckUnityObject(L, 2, typeof(Clishow.CsParticleController));
			obj.RifleFire = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RifleFire on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BakeObj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			Clishow.CsBakeObject arg0 = (Clishow.CsBakeObject)ToLua.CheckUnityObject(L, 2, typeof(Clishow.CsBakeObject));
			obj.BakeObj = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BakeObj on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WPPOS(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnityEngine.Vector3[] arg0 = ToLua.CheckObjectArray<UnityEngine.Vector3>(L, 2);
			obj.WPPOS = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index WPPOS on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WPDIR(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnityEngine.Quaternion[] arg0 = ToLua.CheckObjectArray<UnityEngine.Quaternion>(L, 2);
			obj.WPDIR = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index WPDIR on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TargetAngle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.TargetAngle = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetAngle on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TargetAix(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			Clishow.CsUnit.AffectTargetAix arg0 = (Clishow.CsUnit.AffectTargetAix)ToLua.CheckObject(L, 2, typeof(Clishow.CsUnit.AffectTargetAix));
			obj.TargetAix = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetAix on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OppositeTargetAix(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.OppositeTargetAix = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OppositeTargetAix on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnlyAttack(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.OnlyAttack = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnlyAttack on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LandingInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			Clishow.CsUnitLandingInfo arg0 = (Clishow.CsUnitLandingInfo)ToLua.CheckObject(L, 2, typeof(Clishow.CsUnitLandingInfo));
			obj.LandingInfo = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index LandingInfo on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mIsDestroy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.mIsDestroy = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mIsDestroy on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DeadFlyInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			Clishow.CsUnit.UnitDeadFlyInfo arg0 = (Clishow.CsUnit.UnitDeadFlyInfo)ToLua.CheckObject(L, 2, typeof(Clishow.CsUnit.UnitDeadFlyInfo));
			obj.DeadFlyInfo = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DeadFlyInfo on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Flamethrower(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			CsFlamethrower arg0 = (CsFlamethrower)ToLua.CheckUnityObject(L, 2, typeof(CsFlamethrower));
			obj.Flamethrower = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Flamethrower on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SMRenderer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnityEngine.SkinnedMeshRenderer arg0 = (UnityEngine.SkinnedMeshRenderer)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.SkinnedMeshRenderer));
			obj.SMRenderer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SMRenderer on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SfxData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			Serclimax.Unit.ScUnitSfxData arg0 = (Serclimax.Unit.ScUnitSfxData)ToLua.CheckObject(L, 2, typeof(Serclimax.Unit.ScUnitSfxData));
			obj.SfxData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SfxData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HUD(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnitHud arg0 = (UnitHud)ToLua.CheckUnityObject(L, 2, typeof(UnitHud));
			obj.HUD = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index HUD on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StateEffect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			UnitStateEffect arg0 = (UnitStateEffect)ToLua.CheckUnityObject(L, 2, typeof(UnitStateEffect));
			obj.StateEffect = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index StateEffect on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_tableid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.tableid = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index tableid on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_uid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Clishow.CsUnit obj = (Clishow.CsUnit)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.uid = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index uid on a nil value" : e.Message);
		}
	}
}

